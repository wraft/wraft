#import "$path$" + "/template.typst": conf
#import "@preview/muchpdf:0.1.1": muchpdf

#let horizontalrule = line(start: (25%,0%), end: (75%,0%))

$if(body_color)$
#let body_color = rgb("$body_color$".slice(1))
$else$
#let body_color = rgb("fff")
$endif$

$if(primary_color)$
#let primary_color = rgb("$primary_color$".slice(1))
$else$
#let primary_color = rgb("000")
$endif$

$if(secondary_color)$
#let secondary_color = rgb("$secondary_color$".slice(1))
$else$
#let secondary_color = rgb("000")
$endif$

$if(margin_top)$$if(margin_left)$$if(margin_bottom)$$if(margin_right)$
#let page_margin = (top: $margin_top$cm, left: $margin_left$cm, bottom: $margin_bottom$cm, right: $margin_right$cm)
$else$
#let page_margin = (x: 1.35in)
$endif$$endif$$endif$$endif$

$if(letterhead)$
  #set page(
    background: muchpdf(read("$letterhead$", encoding: none),
    width: 100%, height: 100%, fit: "contain")
  )
$endif$

#let bold_font = "Roboto"
#let italic_font = "Roboto"
#let bold_italic_font = "Roboto"

$if(mainfont_base_options)$
  #let opts = "$mainfont_base_options$"
  #for opt in opts.split(";") {
    let opt = opt.trim()
    if opt.contains("=") {
      let parts = opt.split("=")
      let key = parts.at(0).replace("\n", "").trim()
      let value = parts.at(1).replace("\n", " ").trim()

      if key == "BoldFont" {
       bold_font = value
      }
      if key == "ItalicFont" {
        italic_font = value
      }
      if key == "BoldItalicFont" {
       bold_italic_font = value
      }
    }
  }
$endif$

#let bold-text(body) = text(
  font: bold_font,
  weight: "bold"
)[#body]

#let italic-text(body) = text(
  font: italic_font,
  style: "italic"
)[#body]

#let bold-italic-text(body) = text(
  font: bold_italic_font,
  weight: "bold",
  style: "italic"
)[#body]

#show strong: it => {
  if repr(it.body).contains("emph") {
    bold-italic-text(it.body)
  } else {
    bold-text(it.body)
  }
}

#show emph: it => {
  if repr(it.body).contains("strong") {
    bold-italic-text(it.body)
  } else {
    italic-text(it.body)
  }
}

#show figure: set block(breakable: true)

#show: conf.with(
  margin: page_margin,
  paper: "$if(papersize)$$papersize$$else$us-letter$endif$",
  cols: $if(columns)$$columns$$else$1$endif$,
  // Typography
  font: ("$if(mainfont_base)$$mainfont_base$$else$Mallory$endif$"),
  fontsize: $if(fontsize)$$fontsize$$else$12pt$endif$,
)

#show heading.where(level: 1): it => {
  set text(primary_color)
  block(it)
}

#set table(
  stroke: (thickness: 1pt, dash: "solid"),
  inset: (x: 5pt, y: 10pt),
)

#show table.cell: cell => {
  set align(center)
  cell
}

// TOC heading color
#show outline.entry: it => {
  set text(if it.level <= 0 { primary_color } else { secondary_color })
  it
}

#v(0.8in)

#align(right)[
  #datetime.today().display("[month repr:long] [day], [year]")
]

#v(1cm)

$body$

#align(center + bottom)[
  $if(qr)$
    $if(qrcode)$
      #image("$qrcode$", width: 2cm)
    $endif$
  $endif$
]

$if(bibliography)$
#bibliography($for(bibliography)$$bibliography$$sep$,$endfor$)
$endif$
