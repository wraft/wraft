{
  "tags": [
    {
      "name": "Registration",
      "description": "User registration"
    },
    {
      "name": "Organisation",
      "description": "Manage Enterprise details"
    }
  ],
  "swagger": "2.0",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "API Operations require a valid token."
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/contents/{id}/change/{v_id}": {
      "get": {
        "tags": [
          "Instance"
        ],
        "summary": "List changes",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Change"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Instance id"
          },
          {
            "type": "string",
            "required": true,
            "name": "v_id",
            "in": "path",
            "description": "version id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.change",
        "description": "API to List changes in a particular version"
      }
    },
    "/collection_forms/{c_form_id}/collection_fields": {
      "post": {
        "tags": [
          "CollectionFormField"
        ],
        "summary": "Create an collection form fields api",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormFieldShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CollectionFormFieldRequest"
            },
            "required": true,
            "name": "collection_form_field",
            "in": "body",
            "description": "Collection Form Field to be created"
          }
        ],
        "operationId": "create_collection_forms_fields",
        "description": "Create an collection form fields api"
      }
    },
    "/user/password/forgot": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Generate token",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/AuthToken"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": "string",
            "required": true,
            "name": "email",
            "in": "body",
            "description": "Email"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.generate_token",
        "description": "Api to generate token to update password"
      }
    },
    "/vendors/{id}": {
      "put": {
        "tags": [
          "Vendor"
        ],
        "summary": "Update a vendor",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Vendor"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "vendor id"
          },
          {
            "schema": {
              "$ref": "#/definitions/VendorRequest"
            },
            "required": true,
            "name": "vendor",
            "in": "body",
            "description": "Vendor to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.VendorController.update",
        "description": "API to update a vendor"
      },
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Show a vendor",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Vendor"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "vendor id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.VendorController.show",
        "description": "API to show details of a vendor"
      },
      "delete": {
        "tags": [
          "Vendor"
        ],
        "summary": "Delete a vendor",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Vendor"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "vendor id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.VendorController.delete",
        "description": "API to delete a vendor"
      }
    },
    "/users/password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update password",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "Accepted"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            },
            "required": true,
            "name": "password",
            "in": "body",
            "description": "Password to update"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.update_password",
        "description": "Authenticated updation of password"
      }
    },
    "/flows/{flow_id}/states": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Create a state",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/State"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/StateRequest"
            },
            "required": true,
            "name": "state",
            "in": "body",
            "description": "State to be created"
          },
          {
            "type": "string",
            "required": true,
            "name": "flow_id",
            "in": "path",
            "description": "Flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.create",
        "description": "Create state API"
      },
      "get": {
        "tags": [
          "State"
        ],
        "summary": "State index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FlowIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "flow_id",
            "in": "path",
            "description": "flow id"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.index",
        "description": "Index of States under a flow"
      }
    },
    "/contents/{id}/approve": {
      "put": {
        "tags": [
          "Instance"
        ],
        "summary": "Approve an instance",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContent"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Instance id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.approve",
        "description": "Api to approve an instance"
      }
    },
    "/data_templates": {
      "get": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "All Data templates",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DataTemplatesIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.all_templates",
        "description": "API to get the list of all data templates created so far under an organisation"
      }
    },
    "/flows/{id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "summary": "Flow update",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateFlow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "flow id"
          },
          {
            "schema": {
              "$ref": "#/definitions/FlowRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.update",
        "description": "API to update a flow"
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Show a flow",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FlowAndStates"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.show",
        "description": "Show a flow and its details including states under it"
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "summary": "Flow delete",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Flow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.delete",
        "description": "API to delete a flow"
      }
    },
    "/contents/{id}/states": {
      "patch": {
        "tags": [
          "Instance"
        ],
        "summary": "Update an instance's state",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContent"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Instance id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ContentStateUpdateRequest"
            },
            "required": true,
            "name": "content",
            "in": "body",
            "description": "New state of the instance"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.state_update",
        "description": "API to update an instance's state"
      }
    },
    "/activities": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Activity stream index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivityStreamIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.activity",
        "description": "API to get the list of all activities for which the current user is one of the audience"
      }
    },
    "/user/password/reset/{token}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Veriy password",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TokenVerifiedInfo"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "requried": true,
            "required": true,
            "name": "token",
            "in": "path",
            "description": "Token"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.verify_token",
        "description": "Verify password reset link"
      }
    },
    "/organisations/{id}/members": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Members of an organisation",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/MembersIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          },
          {
            "type": "string",
            "required": false,
            "name": "name",
            "in": "query",
            "description": "Name of the user"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationController.members",
        "description": "All members of an organisation"
      }
    },
    "/collection_forms/{c_form_id}/collection_fields/{id}": {
      "put": {
        "tags": [
          "CollectionFormField"
        ],
        "summary": "Update a Collection Form fields",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "collection form field id"
          },
          {
            "schema": {
              "$ref": "#/definitions/CollectionFormFieldRequest"
            },
            "required": true,
            "name": "collection_form",
            "in": "body",
            "description": "Collection Form field to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormFieldController.update",
        "description": "API to update a collection form fields"
      },
      "get": {
        "tags": [
          "CollectionFormField"
        ],
        "summary": "Show an collection form fields",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormFieldShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the collection form fields"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormFieldController.show",
        "description": "API to get all details of an collection form fields"
      },
      "delete": {
        "tags": [
          "CollectionFormField"
        ],
        "summary": "Delete a Collection Form Field",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormFieldShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "collection form field id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormFieldController.delete",
        "description": "API to delete a collection form field"
      }
    },
    "/content_type_roles/{id}": {
      "delete": {
        "tags": [
          "ContentTypeRole"
        ],
        "summary": "Delete the content type role",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteContentTypeRole"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content_type_role_id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeRoleController.delete",
        "description": "Delete Type role creation api"
      }
    },
    "/content_types/{c_type_id}/data_templates": {
      "post": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "Create data template",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DataTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "ID of the content type"
          },
          {
            "schema": {
              "$ref": "#/definitions/DataTemplateRequest"
            },
            "required": true,
            "name": "data_template",
            "in": "body",
            "description": "Data template to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.create",
        "description": "Create data template API"
      },
      "get": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "Data template index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DataTemplatesIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "ID of the content type"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.index",
        "description": "API to get the list of all data templates created so far under a content type"
      }
    },
    "/content_types/title/search": {
      "get": {
        "tags": [
          "ContentType"
        ],
        "summary": "show all the content type title",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypesIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "key",
            "in": "query",
            "description": "Search key"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.search",
        "description": "API to show content_type by there title"
      }
    },
    "/roles": {
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Create roles ",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RoleRequest"
            },
            "required": true,
            "name": "role",
            "in": "body",
            "description": "Role to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleController.create",
        "description": " Create specified roles in organisation"
      }
    },
    "/organisations/{id}": {
      "put": {
        "tags": [
          "Organisation"
        ],
        "summary": "Update an organisation",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/Organisation"
            },
            "description": "Accepted"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "organisation id"
          },
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Organisation name"
          },
          {
            "type": "string",
            "required": true,
            "name": "legal_name",
            "in": "formData",
            "description": "Legal name of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "addres",
            "in": "formData",
            "description": "address of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "name_of_ceo",
            "in": "formData",
            "description": "name of ceo of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "name_of_cto",
            "in": "formData",
            "description": "name of cto of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "gstin",
            "in": "formData",
            "description": "gstin of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "corporate_id",
            "in": "formData",
            "description": "Corporate id of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "email",
            "in": "formData",
            "description": "Official email"
          },
          {
            "type": "file",
            "required": false,
            "name": "logo",
            "in": "formData",
            "description": "Logo of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "phone",
            "in": "formData",
            "description": "Official ph number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationController.update",
        "description": "API to update an organisation",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Show an Organisation",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Organisation"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Organisation id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationController.show",
        "description": "API to show details of an organisation"
      },
      "delete": {
        "tags": [
          "Organisation"
        ],
        "summary": "Delete an organisation",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Organisation"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Organisation id"
          }
        ],
        "operationId": "delete_organisation",
        "description": "Delete Organisation API"
      }
    },
    "/contents/{id}/build": {
      "post": {
        "tags": [
          "Instance"
        ],
        "summary": "Build a document",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "instance id"
          },
          {
            "schema": {
              "$ref": "#/definitions/BuildRequest"
            },
            "required": false,
            "name": "version",
            "in": "body",
            "description": "Params for version"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.build",
        "description": "API to build a document from instance"
      }
    },
    "/blocks/{id}": {
      "put": {
        "tags": [
          "Block"
        ],
        "summary": "Update blocks",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "description": "Accepted"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "block id"
          },
          {
            "schema": {
              "$ref": "#/definitions/BlockRequest"
            },
            "required": true,
            "name": "block",
            "in": "body",
            "description": "Block to update"
          }
        ],
        "operationId": "update_block",
        "description": "Update a block"
      },
      "get": {
        "tags": [
          "Block"
        ],
        "summary": "Show a block",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Block id"
          }
        ],
        "operationId": "show_block",
        "description": "Show a block details"
      },
      "delete": {
        "tags": [
          "Block"
        ],
        "summary": "Delete a block",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Block id"
          }
        ],
        "operationId": "delete_block",
        "description": "Delete a block from database"
      }
    },
    "/content_type_fields/{id}": {
      "delete": {
        "tags": [
          "ContentTypeField"
        ],
        "summary": "Delete a Content Type Field",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContentType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type field id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeFieldController.delete",
        "description": "API to delete a content type field"
      }
    },
    "/collection_forms": {
      "post": {
        "tags": [
          "CollectionForm"
        ],
        "summary": "Create an collection form api",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CollectionFormRequest"
            },
            "required": true,
            "name": "collection_form",
            "in": "body",
            "description": "Collection Form to be created"
          }
        ],
        "operationId": "create_collection_forms",
        "description": "Create an collection form api"
      },
      "get": {
        "tags": [
          "CollectionForm"
        ],
        "summary": "show all the collection forms",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormController.index",
        "description": "API to show all the collection forms with preloaded collection form fields"
      }
    },
    "/contents/{id}/lock-unlock": {
      "patch": {
        "tags": [
          "Instance"
        ],
        "summary": "Lock or unlock and instance",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContent"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Instance id"
          },
          {
            "schema": {
              "$ref": "#/definitions/LockUnlockRequest"
            },
            "required": true,
            "name": "content",
            "in": "body",
            "description": "Lock or unlock instance"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.lock_unlock",
        "description": "API to update an instanc"
      }
    },
    "/content_type_roles": {
      "post": {
        "tags": [
          "ContentTypeRole"
        ],
        "summary": "Create the content type role",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypeRole"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ContentTypeRole"
            },
            "required": false,
            "name": "content_type_role",
            "in": "body",
            "description": "Content Type Role API"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeRoleController.create",
        "description": "Content Type role creation api"
      }
    },
    "/organisations/{id}/invite": {
      "post": {
        "tags": [
          "Organisation"
        ],
        "summary": "Invite new member to the organisation",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/InvitedResponse"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Organisation id"
          },
          {
            "schema": "string",
            "required": true,
            "name": "email",
            "in": "body",
            "description": "Email of the user"
          },
          {
            "schema": "string",
            "required": true,
            "name": "role_id",
            "in": "body",
            "description": "role of the user"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationController.invite",
        "description": "Invite new member to the organisation"
      }
    },
    "/organisation-fields": {
      "post": {
        "tags": [
          "OrganisationField"
        ],
        "summary": "Create organisation field",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OrganisationField"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/OrganisationFieldRequest"
            },
            "required": true,
            "name": "organisation_field",
            "in": "body",
            "description": "Organisation field to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationFieldController.create",
        "description": "Create organisation field API"
      },
      "get": {
        "tags": [
          "OrganisationField"
        ],
        "summary": "Organisation field index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OrganisationFieldIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationFieldController.index",
        "description": "API to get the list of all organisation fields created so far"
      }
    },
    "/permissions/{id}": {
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Delete a permission",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Resource"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "permission id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PermissionController.delete",
        "description": "API to remove a permission"
      }
    },
    "/contents/title/search": {
      "get": {
        "tags": [
          "Instance"
        ],
        "summary": "Search instances",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentsIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "key",
            "in": "query",
            "description": "Search key"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.search",
        "description": "API to search instances by it title on serialized on instnaces under that organisation"
      }
    },
    "/organisations": {
      "post": {
        "tags": [
          "Organisation"
        ],
        "summary": "Register organisation",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/Organisation"
            },
            "description": "Created"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Organisation name"
          },
          {
            "type": "string",
            "required": true,
            "name": "legal_name",
            "in": "formData",
            "description": "Legal name of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "addres",
            "in": "formData",
            "description": "address of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "name_of_ceo",
            "in": "formData",
            "description": "name of ceo of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "name_of_cto",
            "in": "formData",
            "description": "name of cto of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "gstin",
            "in": "formData",
            "description": "gstin of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "corporate_id",
            "in": "formData",
            "description": "Corporate id of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "email",
            "in": "formData",
            "description": "Official email"
          },
          {
            "type": "file",
            "required": false,
            "name": "logo",
            "in": "formData",
            "description": "Logo of organisation"
          },
          {
            "type": "string",
            "required": false,
            "name": "phone",
            "in": "formData",
            "description": "Official ph number"
          }
        ],
        "operationId": "create_organisation",
        "description": "Create Organisation API",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "List of all organisations",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Index"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "name",
            "in": "query",
            "description": "Organisations name"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationController.index",
        "description": "All organisation that we have"
      }
    },
    "/approval_systems": {
      "post": {
        "tags": [
          "ApprovalSystem"
        ],
        "summary": "Create approval_system",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ApprovalSystem"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApprovalSystemRequest"
            },
            "required": true,
            "name": "approval_system",
            "in": "body",
            "description": "ApprovalSystem to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ApprovalSystemController.create",
        "description": "Create approval_system API"
      },
      "get": {
        "tags": [
          "ApprovalSystem"
        ],
        "summary": "Approval systems",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Approved"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ApprovalSystemController.index",
        "description": "Api to list approval systems"
      }
    },
    "/block_templates/{id}": {
      "put": {
        "tags": [
          "BlockTemplate"
        ],
        "summary": "Update a block_template",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/BlockTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "block_template id"
          },
          {
            "schema": {
              "$ref": "#/definitions/BlockTemplateRequest"
            },
            "required": true,
            "name": "block_template",
            "in": "body",
            "description": "BlockTemplate to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.BlockTemplateController.update",
        "description": "API to update a block_template"
      },
      "get": {
        "tags": [
          "BlockTemplate"
        ],
        "summary": "Show a block_template",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/BlockTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "block_template id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.BlockTemplateController.show",
        "description": "API to show details of a block_template"
      },
      "delete": {
        "tags": [
          "BlockTemplate"
        ],
        "summary": "Delete a block_template",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/BlockTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "block_template id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.BlockTemplateController.delete",
        "description": "API to delete a block_template"
      }
    },
    "/content_types/{c_type_id}/data_templates/bulk_import": {
      "post": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "Create data template in bulk",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "Content type id"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Bulk data template creation source file"
          },
          {
            "type": "map",
            "required": false,
            "name": "mapping",
            "in": "formData",
            "description": "Mappings for the CSV"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.bulk_import",
        "description": "API for data template bulk creation",
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/users/signin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User sign in",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UserToken"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UserLoginRequest"
            },
            "required": true,
            "name": "user",
            "in": "body",
            "description": "User to trying to login"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.signin",
        "description": "User sign in API"
      }
    },
    "/resources/{id}": {
      "put": {
        "tags": [
          "Resource"
        ],
        "summary": "Update a resource",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Resource"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "resource id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ResourceRequest"
            },
            "required": true,
            "name": "resource",
            "in": "body",
            "description": "Resource to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ResourceController.update",
        "description": "API to update a resource"
      },
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Show a resource",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Resource"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "resource id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ResourceController.show",
        "description": "API to show details of a resource"
      },
      "delete": {
        "tags": [
          "Resource"
        ],
        "summary": "Delete a resource",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Resource"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "resource id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ResourceController.delete",
        "description": "API to delete a resource"
      }
    },
    "/assets": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Create an asset",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Asset"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Asset name"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Asset file to upload"
          }
        ],
        "operationId": "create_asset",
        "description": "Create asset API",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Asset index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/AssetsIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.AssetController.index",
        "description": "API to get the list of all assets created so far under an organisation"
      }
    },
    "/layouts/{id}": {
      "put": {
        "tags": [
          "Layout"
        ],
        "summary": "Update a Layout",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowLayout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          },
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Layout's name"
          },
          {
            "type": "string",
            "required": true,
            "name": "description",
            "in": "formData",
            "description": "Layout description"
          },
          {
            "type": "string",
            "required": true,
            "name": "width",
            "in": "formData",
            "description": "Layout width"
          },
          {
            "type": "string",
            "required": true,
            "name": "height",
            "in": "formData",
            "description": "Layout height"
          },
          {
            "type": "string",
            "required": true,
            "name": "unit",
            "in": "formData",
            "description": "Layout dimension unit"
          },
          {
            "type": "string",
            "required": false,
            "name": "slug",
            "in": "formData",
            "description": "Name of slug to be used"
          },
          {
            "type": "file",
            "required": false,
            "name": "slug_file",
            "in": "formData",
            "description": "Slug file to upload"
          },
          {
            "type": "file",
            "required": true,
            "name": "screenshot",
            "in": "formData",
            "description": "Screenshot to upload"
          },
          {
            "type": "list",
            "required": false,
            "name": "assets",
            "in": "formData",
            "description": "IDs of assets of the layout"
          },
          {
            "type": "string",
            "required": true,
            "name": "engine_id",
            "in": "formData",
            "description": "ID of layout's engine"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.update",
        "description": "API to update a layout",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Layout"
        ],
        "summary": "Show a Layout",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowLayout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.show",
        "description": "API to show details of a layout"
      },
      "delete": {
        "tags": [
          "Layout"
        ],
        "summary": "Delete a Layout",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Layout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.delete",
        "description": "API to delete a layout"
      }
    },
    "/comments/{id}": {
      "put": {
        "tags": [
          "Comment"
        ],
        "summary": "Update a comment",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Comment"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "comment id"
          },
          {
            "schema": {
              "$ref": "#/definitions/CommentRequest"
            },
            "required": true,
            "name": "comment",
            "in": "body",
            "description": "Comment to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CommentController.update",
        "description": "API to update a comment"
      },
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Show a comment",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Comment"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "comment id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CommentController.show",
        "description": "API to show details of a comment"
      },
      "delete": {
        "tags": [
          "Comment"
        ],
        "summary": "Delete a comment",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Comment"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "comment id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CommentController.delete",
        "description": "API to delete a comment"
      }
    },
    "/content_types/{id}/roles": {
      "get": {
        "tags": [
          "ContentType"
        ],
        "summary": "show all the content type role",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypeRole"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.show_content_type_role",
        "description": "API to list all the roles under the content_type"
      }
    },
    "/data_templates/{id}": {
      "put": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "Update a data template",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowDataTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Data template id"
          },
          {
            "schema": {
              "$ref": "#/definitions/DataTemplateRequest"
            },
            "required": true,
            "name": "data_templte",
            "in": "body",
            "description": "Data template to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.update",
        "description": "API to update a data template"
      },
      "get": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "Show Data template",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowDataTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the data template"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.show",
        "description": "API to get all details of a data template"
      },
      "delete": {
        "tags": [
          "DataTemplate"
        ],
        "summary": "Delete a data template",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DataTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "data template id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.DataTemplateController.delete",
        "description": "API to delete a data template"
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Payment index",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/PaymentIndex"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "payment_index",
        "description": "List all payments done so far"
      }
    },
    "/collection_forms/{id}": {
      "put": {
        "tags": [
          "CollectionForm"
        ],
        "summary": "Update a Collection Form",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "collection form id"
          },
          {
            "schema": {
              "$ref": "#/definitions/CollectionFormRequest"
            },
            "required": true,
            "name": "collection_form",
            "in": "body",
            "description": "Collection Form to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormController.update",
        "description": "API to update a collection form"
      },
      "get": {
        "tags": [
          "CollectionForm"
        ],
        "summary": "Show an collection form",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the collection form"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormController.show",
        "description": "API to get all details of an collection form"
      },
      "delete": {
        "tags": [
          "CollectionForm"
        ],
        "summary": "Delete a Collection Form",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CollectionFormShow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "collection form id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CollectionFormController.delete",
        "description": "API to delete a collection form"
      }
    },
    "/users/search": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Search User",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UserSearch"
            },
            "description": "ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "key",
            "in": "query",
            "description": "Search key"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.search",
        "description": "Filtered user by there name"
      }
    },
    "/vendors": {
      "post": {
        "tags": [
          "Vendor"
        ],
        "summary": "Create vendor",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Vendor"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/VendorRequest"
            },
            "required": true,
            "name": "vendor",
            "in": "body",
            "description": "Vendor to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.VendorController.create",
        "description": "Create vendor API"
      },
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Vendor index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/VendorIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.VendorController.index",
        "description": "API to get the list of all vendors created so far"
      }
    },
    "/themes/{id}": {
      "put": {
        "tags": [
          "Theme"
        ],
        "summary": "Update a theme",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "theme id"
          },
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Theme's name"
          },
          {
            "type": "string",
            "required": true,
            "name": "font",
            "in": "formData",
            "description": "Font to be used in the theme"
          },
          {
            "type": "string",
            "required": true,
            "name": "typescale",
            "in": "formData",
            "description": "Typescale of the theme"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Theme file to upload"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.update",
        "description": "Update a theme API",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Theme"
        ],
        "summary": "Show a theme",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowTheme"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "theme id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.show",
        "description": "Show a theme API"
      },
      "delete": {
        "tags": [
          "Theme"
        ],
        "summary": "Delete a theme",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "theme id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.delete",
        "description": "API to delete a theme"
      }
    },
    "/notifications": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "create notification",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OrganisationFieldRequest"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/NotificationRequest"
            },
            "required": true,
            "name": "notification",
            "in": "body",
            "description": "Notification to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.NotificationController.create",
        "description": ""
      }
    },
    "/pipelines/{pipeline_id}/triggers": {
      "post": {
        "tags": [
          "TriggerHistory"
        ],
        "summary": "Pipeline trigger",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/GeneralResponse"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "pipeline_id",
            "in": "path",
            "description": "pipeline id"
          },
          {
            "schema": {
              "$ref": "#/definitions/TriggerData"
            },
            "required": true,
            "name": "data",
            "in": "body",
            "description": "Data of a trigger"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.TriggerHistoryController.create",
        "description": "API to trigger a pipeline"
      },
      "get": {
        "tags": [
          "TriggerHistory"
        ],
        "summary": "Pipeline trigger index",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TriggerHistoryIndex"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "pipeline_id",
            "in": "path",
            "description": "pipeline id"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.TriggerHistoryController.index",
        "description": "API to get the list of trigger histories of a pipeline"
      }
    },
    "/field_types/{id}": {
      "put": {
        "tags": [
          "FieldType"
        ],
        "summary": "Update a field type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FieldType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Field type id"
          },
          {
            "schema": {
              "$ref": "#/definitions/FieldTypeRequest"
            },
            "required": true,
            "name": "field_type",
            "in": "body",
            "description": "Field Type to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FieldTypeController.update",
        "description": "API to update a field type"
      },
      "get": {
        "tags": [
          "FieldType"
        ],
        "summary": "Show a field type",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FieldType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the field type"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FieldTypeController.show",
        "description": "API to show a field type"
      },
      "delete": {
        "tags": [
          "FieldType"
        ],
        "summary": "Delete a field type",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FieldType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "field type id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FieldTypeController.delete",
        "description": "API to delete a field type"
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Current user",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.UserController.me",
        "description": "Current User details"
      }
    },
    "/resources": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create resource",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Resource"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ResourceRequest"
            },
            "required": true,
            "name": "resource",
            "in": "body",
            "description": "Resource to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ResourceController.create",
        "description": "Create resource API"
      },
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Resource index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ResourceIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.ResourceController.index",
        "description": "API to get the list of all resources created so far"
      }
    },
    "/flows": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a flow",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ControlledFlow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ControlledFlowRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.create",
        "description": "Create flow API"
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Flow index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FlowIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.index",
        "description": "Index of flows in current user's organisation"
      }
    },
    "/content_types": {
      "post": {
        "tags": [
          "ContentType"
        ],
        "summary": "Create content type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypeAndLayoutAndFlow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ContentTypeRequest"
            },
            "required": true,
            "name": "content_type",
            "in": "body",
            "description": "Content Type to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.create",
        "description": "Create content type API"
      },
      "get": {
        "tags": [
          "ContentType"
        ],
        "summary": "Content Type index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypesIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.index",
        "description": "API to get the list of all content types created so far"
      }
    },
    "/pipelines": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Create a pipeline",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/PipelineAndStages"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PipelineRequest"
            },
            "required": true,
            "name": "pipeline",
            "in": "body",
            "description": "Pipeline to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipelineController.create",
        "description": "Create pipeline API"
      },
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline index of a organisation",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/PipelineIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipelineController.index",
        "description": "API to list pipelines of current user's organisation."
      }
    },
    "/flows/{id}/align-states": {
      "put": {
        "tags": [
          "Flow"
        ],
        "summary": "Update states",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FlowAndStates"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Flow id"
          },
          {
            "schema": {
              "$ref": "#/definitions/AlignStateRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow and states to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.align_states",
        "description": "Api to update order of states of a flow"
      }
    },
    "users/remove": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Api to remove a user",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "User id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.remove",
        "description": "Api to remove a user from an organisation"
      }
    },
    "/block_templates/bulk_import": {
      "post": {
        "tags": [
          "BlockTemplate"
        ],
        "summary": "Create block template in bulk",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          }
        },
        "parameters": [
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Bulk block template creation source file"
          },
          {
            "type": "map",
            "required": false,
            "name": "mapping",
            "in": "formData",
            "description": "Mappings for the CSV"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.BlockTemplateController.bulk_import",
        "description": "API for block template bulk creation",
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/role_groups": {
      "post": {
        "tags": [
          "RoleGroup"
        ],
        "summary": "/create a role group",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/RoleGroup"
            },
            "description": "Updated"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RoleGroupRequest"
            },
            "required": true,
            "name": "role_group",
            "in": "body",
            "description": "Role group to create"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleGroupController.create",
        "description": "/creates a role group"
      },
      "get": {
        "tags": [
          "RoleGroup"
        ],
        "summary": "list role groups",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "204": {
            "schema": {
              "$ref": "#/definitions/RoleGroupIndex"
            },
            "description": "Deleted"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.RoleGroupController.index",
        "description": "api to list all role groups"
      }
    },
    "/pipelines/{id}": {
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Update a pipeline",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowPipeline"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of pipeline"
          },
          {
            "schema": {
              "$ref": "#/definitions/PipelineRequest"
            },
            "required": true,
            "name": "pipeline",
            "in": "body",
            "description": "Pipeline to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipelineController.update",
        "description": "API to update a pipeline."
      },
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Show a pipeline",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowPipeline"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of pipeline"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipelineController.show",
        "description": "API to show a pipeline."
      },
      "delete": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline delete",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Pipeline"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "pipeline id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipelineController.delete",
        "description": "API to delete a pipeline"
      }
    },
    "/profiles": {
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "update users profile",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Profile"
            },
            "description": "Updated"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Name"
          },
          {
            "type": "file",
            "required": false,
            "name": "profile_pic",
            "in": "formData",
            "description": "Profile pic"
          },
          {
            "type": "date",
            "required": false,
            "name": "dob",
            "in": "formData",
            "description": "Date of Birth"
          },
          {
            "type": "string",
            "required": true,
            "name": "gender",
            "in": "formData",
            "description": "Gender"
          }
        ],
        "operationId": "update_profile",
        "description": "Update users profile",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Show current profile",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Profile"
            },
            "description": "OK"
          }
        },
        "parameters": [],
        "operationId": "show_current_profile",
        "description": "Api to show current profile"
      }
    },
    "/assets/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Update an asset",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Asset"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "asset id"
          },
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Asset name"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Asset file to upload"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.AssetController.update",
        "description": "API to update an asset",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Show an asset",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowAsset"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the asset"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.AssetController.show",
        "description": "API to get all details of an asset"
      },
      "delete": {
        "tags": [
          "Asset"
        ],
        "summary": "Delete an asset",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Asset"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "asset id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.AssetController.delete",
        "description": "API to delete an asset"
      }
    },
    "/approval_systems/{id}": {
      "put": {
        "tags": [
          "ApprovalSystem"
        ],
        "summary": "Update a approval_system",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ApprovalSystem"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "approval_system id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ApprovalSystemRequest"
            },
            "required": true,
            "name": "approval_system",
            "in": "body",
            "description": "ApprovalSystem to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ApprovalSystemController.update",
        "description": "API to update a approval_system"
      },
      "get": {
        "tags": [
          "ApprovalSystem"
        ],
        "summary": "Show a approval_system",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ApprovalSystem"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "approval_system id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ApprovalSystemController.show",
        "description": "API to show details of a approval_system"
      },
      "delete": {
        "tags": [
          "ApprovalSystem"
        ],
        "summary": "Delete a approval_system",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ApprovalSystem"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "approval_system id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ApprovalSystemController.delete",
        "description": "API to delete a approval_system"
      }
    },
    "/organisations/{id}/memberships": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Show membership",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Membership"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Organisation ID"
          }
        ],
        "operationId": "show_membership",
        "description": "Show membership of an organisation"
      }
    },
    "/users/instance-approval-systems": {
      "get": {
        "tags": [
          "InstanceApprovalSystem"
        ],
        "summary": "list all instance approval system under an user",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/InstanceApprovalSystemIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceApprovalSystemController.instances_to_approve",
        "description": "Api to list all approval system under an user"
      }
    },
    "/block_templates": {
      "post": {
        "tags": [
          "BlockTemplate"
        ],
        "summary": "Create block_template",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/BlockTemplate"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/BlockTemplateRequest"
            },
            "required": true,
            "name": "block_template",
            "in": "body",
            "description": "BlockTemplate to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.BlockTemplateController.create",
        "description": "Create block_template API"
      },
      "get": {
        "tags": [
          "BlockTemplate"
        ],
        "summary": "BlockTemplate index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/BlockTemplateIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.BlockTemplateController.index",
        "description": "API to get the list of all block_templates created so far"
      }
    },
    "/organisation-fields/{id}": {
      "put": {
        "tags": [
          "OrganisationField"
        ],
        "summary": "Update an Organisation field",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OrganisationField"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          },
          {
            "schema": {
              "$ref": "#/definitions/OrganisationFieldRequest"
            },
            "required": true,
            "name": "layout",
            "in": "body",
            "description": "Organisation to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationFieldController.update",
        "description": "API to update an organisation field"
      },
      "get": {
        "tags": [
          "OrganisationField"
        ],
        "summary": "Show a Organisation fields",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OrganisationField"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "organisation field id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationFieldController.show",
        "description": "API to show details of a organisation field"
      },
      "delete": {
        "tags": [
          "OrganisationField"
        ],
        "summary": "Delete an organisation field",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OrganisationField"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "organisation field id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.OrganisationFieldController.delete",
        "description": "API to delete an organisation field"
      }
    },
    "/content_types/{c_type_id}/bulk_build": {
      "post": {
        "tags": [
          "ContentType"
        ],
        "summary": "Bulk build documents",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "Content type id"
          },
          {
            "type": "string",
            "required": true,
            "name": "state_id",
            "in": "formData",
            "description": "State id"
          },
          {
            "type": "string",
            "required": true,
            "name": "d_temp_id",
            "in": "formData",
            "description": "Data template id"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Bulk build source file"
          },
          {
            "type": "map",
            "required": false,
            "name": "mapping",
            "in": "formData",
            "description": "Mappings for the CSV"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.bulk_build",
        "description": "API to bulk build documents for a content type",
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/themes": {
      "post": {
        "tags": [
          "Theme"
        ],
        "summary": "Create theme",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Theme's name"
          },
          {
            "type": "string",
            "required": false,
            "name": "font",
            "in": "formData",
            "description": "Font to be used in the theme, e.g. 'Malery', 'Roboto'"
          },
          {
            "type": "string",
            "required": false,
            "name": "body_color",
            "in": "formData",
            "description": "Body color to be used in the theme, e.g. #ca1331"
          },
          {
            "type": "string",
            "required": false,
            "name": "primary_color",
            "in": "formData",
            "description": "Primary color to be used in the theme, e.g. #ca1331"
          },
          {
            "type": "string",
            "required": false,
            "name": "secondary_color",
            "in": "formData",
            "description": "Secondary color to be used in the theme, e.g #af0903"
          },
          {
            "type": "map",
            "required": false,
            "name": "typescale",
            "in": "formData",
            "description": "Typescale of the theme, e.g. {'h1': 10, 'p': 6, 'h2': 8}"
          },
          {
            "type": "bool",
            "required": false,
            "name": "default_theme",
            "in": "formData",
            "description": "true or false"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Font file to upload, e.g. a roboto.ttf file"
          },
          {
            "type": "file",
            "required": false,
            "name": "preview_file",
            "in": "formData",
            "description": "Preview file to upload, e.g. .png .jpg"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.create",
        "description": "Create theme API",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Theme"
        ],
        "summary": "Theme index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ThemeIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.index",
        "description": "Theme index API"
      }
    },
    "/permissions": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Create permission",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Permission"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PermissionRequest"
            },
            "required": true,
            "name": "resource",
            "in": "body",
            "description": "Permission to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PermissionController.create",
        "description": "Create permission API"
      },
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Permission index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/PermissionIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.PermissionController.index",
        "description": "API to get the list of all permissions created so far"
      }
    },
    "/contents": {
      "get": {
        "tags": [
          "Instance"
        ],
        "summary": "All instances",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentsIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.all_contents",
        "description": "API to get the list of all instances created so far under an organisation"
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "show all the content type under the role",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleController.show",
        "description": "API to list all the content type under the role"
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Delete a role",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "role id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleController.delete",
        "description": "API to delete a role"
      }
    },
    "/blocks": {
      "post": {
        "tags": [
          "Block"
        ],
        "summary": "Generate blocks",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "description": "Created"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Block name"
          },
          {
            "type": "string",
            "required": true,
            "name": "btype",
            "in": "formData",
            "description": "Block type"
          },
          {
            "type": "string",
            "required": false,
            "name": "description",
            "in": "formData",
            "description": "Description about Block"
          },
          {
            "type": "map",
            "required": false,
            "name": "dataset",
            "in": "formData",
            "description": "Dataset for creating charts"
          },
          {
            "type": "string",
            "required": false,
            "name": "api_route",
            "in": "formData",
            "description": "Api route to generate chart"
          },
          {
            "type": "string",
            "required": false,
            "name": "endpoint",
            "in": "formData",
            "description": "name of the endpoint going to choose"
          },
          {
            "type": "file",
            "required": false,
            "name": "input",
            "in": "formData",
            "description": "Input file to upload"
          }
        ],
        "operationId": "create_block",
        "description": "Create a block",
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/memberships/{id}": {
      "put": {
        "tags": [
          "Membership"
        ],
        "summary": "Update a membership",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Membership"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Membership ID"
          },
          {
            "schema": {
              "$ref": "#/definitions/MembershipRequest"
            },
            "required": true,
            "name": "membership",
            "in": "body",
            "description": "Membership to be updated"
          }
        ],
        "operationId": "update_membership",
        "description": "Update a membership"
      }
    },
    "/user/password/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset password",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            },
            "required": true,
            "name": "token",
            "in": "body",
            "description": "Password deteails to reset"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.reset",
        "description": "Reseting password of user"
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Show a payment",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowPayment"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of payment"
          }
        ],
        "operationId": "show_payment",
        "description": "Show a payment"
      }
    },
    "/states/{id}": {
      "put": {
        "tags": [
          "State"
        ],
        "summary": "State update",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowState"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "state id"
          },
          {
            "schema": {
              "$ref": "#/definitions/StateRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.update",
        "description": "API to update a state"
      },
      "delete": {
        "tags": [
          "State"
        ],
        "summary": "State delete",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/State"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "state id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.delete",
        "description": "API to delete a state"
      }
    },
    "/role_groups/{id}": {
      "put": {
        "tags": [
          "RoleGroup"
        ],
        "summary": "/update a role group",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/RoleGroup"
            },
            "description": "Updated"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Role group id"
          },
          {
            "schema": {
              "$ref": "#/definitions/RoleGroupRequest"
            },
            "required": true,
            "name": "role_group",
            "in": "body",
            "description": "Role group to update"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleGroupController.update",
        "description": "/updates a role group"
      },
      "get": {
        "tags": [
          "RoleGroup"
        ],
        "summary": "get a role group",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/RoleGroup"
            },
            "description": "Created"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Role group id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleGroupController.show",
        "description": ""
      },
      "delete": {
        "tags": [
          "RoleGroup"
        ],
        "summary": "delete a role group",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "204": {
            "schema": {
              "$ref": "#/definitions/RoleGroup"
            },
            "description": "Deleted"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Role group id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RoleGroupController.delete",
        "description": "Delete a role group"
      }
    },
    "/field_types": {
      "post": {
        "tags": [
          "FieldType"
        ],
        "summary": "Create a field type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FieldType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/FieldTypeRequest"
            },
            "required": true,
            "name": "field_type",
            "in": "body",
            "description": "Field Type to be created"
          }
        ],
        "operationId": "create_field_type",
        "description": "Create field type API"
      },
      "get": {
        "tags": [
          "FieldType"
        ],
        "summary": "Field type index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FieldTypeIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FieldTypeController.index",
        "description": "API to get the list of all field typs created so far"
      }
    },
    "/contents/{id}": {
      "put": {
        "tags": [
          "Instance"
        ],
        "summary": "Update an instance",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContent"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Instance id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ContentUpdateRequest"
            },
            "required": true,
            "name": "content",
            "in": "body",
            "description": "Instance to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.update",
        "description": "API to update an instance"
      },
      "get": {
        "tags": [
          "Instance"
        ],
        "summary": "Show an instance",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContent"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the instance"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.show",
        "description": "API to get all details of an instance"
      },
      "delete": {
        "tags": [
          "Instance"
        ],
        "summary": "Delete an instance",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "instance id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.delete",
        "description": "API to delete an instance"
      }
    },
    "/content_types/{c_type_id}/contents": {
      "post": {
        "tags": [
          "Instance"
        ],
        "summary": "Create a content",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentAndContentTypeAndState"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "content type id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ContentRequest"
            },
            "required": true,
            "name": "content",
            "in": "body",
            "description": "Content to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.create",
        "description": "Create content API"
      },
      "get": {
        "tags": [
          "Instance"
        ],
        "summary": "Instance index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentsIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "ID of the content type"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.index",
        "description": "API to get the list of all instances created so far under a content type"
      }
    },
    "/layouts": {
      "post": {
        "tags": [
          "Layout"
        ],
        "summary": "Create layout",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/LayoutAndEngine"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Layout's name"
          },
          {
            "type": "string",
            "required": true,
            "name": "description",
            "in": "formData",
            "description": "Layout description"
          },
          {
            "type": "string",
            "required": true,
            "name": "width",
            "in": "formData",
            "description": "Layout width"
          },
          {
            "type": "string",
            "required": true,
            "name": "height",
            "in": "formData",
            "description": "Layout height"
          },
          {
            "type": "string",
            "required": true,
            "name": "unit",
            "in": "formData",
            "description": "Layout dimension unit"
          },
          {
            "type": "string",
            "required": false,
            "name": "slug",
            "in": "formData",
            "description": "Name of slug to be used"
          },
          {
            "type": "file",
            "required": false,
            "name": "slug_file",
            "in": "formData",
            "description": "Slug file to upload"
          },
          {
            "type": "file",
            "required": true,
            "name": "screenshot",
            "in": "formData",
            "description": "Screenshot to upload"
          },
          {
            "type": "list",
            "required": false,
            "name": "assets",
            "in": "formData",
            "description": "IDs of assets of the layout"
          },
          {
            "type": "string",
            "required": true,
            "name": "engine_id",
            "in": "formData",
            "description": "ID of layout's engine"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.create",
        "description": "Create layout API",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Layout"
        ],
        "summary": "Layout index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/LayoutIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.index",
        "description": "API to get the list of all layouts created so far"
      }
    },
    "/plans/{id}": {
      "put": {
        "tags": [
          "Plan"
        ],
        "summary": "Update a plan",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Plan"
            },
            "description": "Updated"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the plan to be updated"
          },
          {
            "schema": {
              "$ref": "#/definitions/PlanRequest"
            },
            "required": true,
            "name": "plan",
            "in": "body",
            "description": "Plan to be updated"
          }
        ],
        "operationId": "update_plan",
        "description": "Update a plan"
      },
      "get": {
        "tags": [
          "Plan"
        ],
        "summary": "Show Plan",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Plan"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the plan"
          }
        ],
        "operationId": "show_plan",
        "description": "Show a plan"
      },
      "delete": {
        "tags": [
          "Plan"
        ],
        "summary": "Delete a plan",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Plan"
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the plan to be deleted"
          }
        ],
        "operationId": "delete_plan",
        "description": "Delete a plan"
      }
    },
    "/layouts/{id}/assets/{a_id}": {
      "delete": {
        "tags": [
          "Layout"
        ],
        "summary": "Delete a Layout Asset",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowLayout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          },
          {
            "type": "string",
            "required": true,
            "name": "a_id",
            "in": "path",
            "description": "asset id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.delete_layout_asset",
        "description": "API to delete a layout-asset association"
      }
    },
    "/stages/{id}": {
      "put": {
        "tags": [
          "PipeStage"
        ],
        "summary": "Update a pipe stage",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/PipeStage"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the pipe stage"
          },
          {
            "schema": {
              "$ref": "#/definitions/PipeStageRequestMap"
            },
            "required": true,
            "name": "stage",
            "in": "body",
            "description": "Pipe stage to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipeStageController.update",
        "description": "Update pipe stage API"
      },
      "delete": {
        "tags": [
          "PipeStage"
        ],
        "summary": "Delete a pipe stage",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DeletedPipeStage"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "ID of the pipe stage"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipeStageController.delete",
        "description": "Delete pipe stage API"
      }
    },
    "/pipelines/{pipeline_id}/stages": {
      "post": {
        "tags": [
          "PipeStage"
        ],
        "summary": "Create a pipe stage",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/PipeStage"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "pipeline_id",
            "in": "path",
            "description": "ID of the pipeline"
          },
          {
            "schema": {
              "$ref": "#/definitions/PipeStageRequestMap"
            },
            "required": true,
            "name": "pipeline",
            "in": "body",
            "description": "Pipe stage to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.PipeStageController.create",
        "description": "Create pipe stage API"
      }
    },
    "/users/{id}/instance-approval-systems": {
      "get": {
        "tags": [
          "InstanceApprovalSystem"
        ],
        "summary": "List all instance approval systems",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/InstanceApprovalSystemIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "User id"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceApprovalSystemController.index",
        "description": "Api to list all approval system under an user"
      }
    },
    "/comments": {
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": "Create comment",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Comment"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CommentRequest"
            },
            "required": true,
            "name": "comment",
            "in": "body",
            "description": "Comment to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CommentController.create",
        "description": "Create comment API"
      },
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Comment index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CommentIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "master_id",
            "in": "query",
            "description": "Master id"
          },
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.CommentController.index",
        "description": "API to get the list of all comments created under a master"
      }
    },
    "/users/signup/": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "User registration",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UserToken"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "token",
            "in": "query",
            "description": "Token obtained from invitation mail"
          },
          {
            "schema": {
              "$ref": "#/definitions/UserRegisterRequest"
            },
            "required": true,
            "name": "user",
            "in": "body",
            "description": "User to register"
          }
        ],
        "operationId": "create_user",
        "description": "User registration API"
      }
    },
    "/plans": {
      "post": {
        "tags": [
          "Plan"
        ],
        "summary": "Create a plan",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Plan"
            },
            "description": "Updated"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PlanRequest"
            },
            "required": true,
            "name": "plan",
            "in": "body",
            "description": "Plan to be created"
          }
        ],
        "operationId": "create_plan",
        "description": "Create a plan"
      },
      "get": {
        "tags": [
          "Plan"
        ],
        "summary": "Plan index",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Plans"
            },
            "description": "OK"
          }
        },
        "parameters": [],
        "operationId": "plan_index",
        "description": "List all plans created so far"
      }
    },
    "/content_types/{id}": {
      "put": {
        "tags": [
          "ContentType"
        ],
        "summary": "Update a Content Type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContentType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ContentTypeRequest"
            },
            "required": true,
            "name": "layout",
            "in": "body",
            "description": "Content Type to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.update",
        "description": "API to update a content type"
      },
      "get": {
        "tags": [
          "ContentType"
        ],
        "summary": "Show a Content Type",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContentType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.show",
        "description": "API to show details of a content type"
      },
      "delete": {
        "tags": [
          "ContentType"
        ],
        "summary": "Delete a Content Type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypeWithoutFields"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.delete",
        "description": "API to delete a content type"
      }
    },
    "/contents/{id}/reject": {
      "put": {
        "tags": [
          "Instance"
        ],
        "summary": "Reject approval of an instance",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContent"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "Instance id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.reject",
        "description": "Api to reject an instance"
      }
    },
    "/engines": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "List of all enignes",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/EngineIndex"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "name": "page",
            "in": "query",
            "description": "Page number"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.EngineController.index",
        "description": "API to list of all enignes creates/seeded so far"
      }
    }
  },
  "info": {
    "version": "0.0.1",
    "title": "Wraft Docs"
  },
  "host": "localhost:4000",
  "definitions": {
    "Resource": {
      "type": "object",
      "title": "Resource",
      "required": [
        "action",
        "category",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the layout"
        },
        "category": {
          "type": "string",
          "description": "Name of the category"
        },
        "action": {
          "type": "string",
          "description": "Name of the action"
        }
      },
      "example": {
        "id": "1232148nb3478",
        "category": "Flow",
        "action": "create"
      },
      "description": "A Resource"
    },
    "PipelineAndStages": {
      "type": "object",
      "title": "Pipeline and its stages",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow last updated"
        },
        "stages": {
          "$ref": "#/definitions/PipeStages"
        },
        "name": {
          "type": "string",
          "description": "Name of the pipeline"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the pipeline"
        },
        "api_route": {
          "type": "string",
          "description": "API route of the CRM"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "stages": [
          {
            "state": {
              "updated_at": "2020-01-21T14:00:00Z",
              "state": "published",
              "order": 1,
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478"
            },
            "data_template": {
              "updated_at": "2020-01-21T14:00:00Z",
              "title_template": "Letter for [user]",
              "title": "Template 1",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "data": "Hi [user]"
            },
            "content_type": {
              "updated_at": "2020-01-21T14:00:00Z",
              "prefix": "OFFLET",
              "name": "Offer letter",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "fields": [
                {
                  "meta": {
                    "src": "/img/img.png",
                    "alt": "Image"
                  },
                  "key": "position",
                  "field_type_id": "kjb14713132lkdac"
                },
                {
                  "meta": {
                    "src": "/img/img.png",
                    "alt": "Image"
                  },
                  "key": "name",
                  "field_type_id": "kjb2347mnsad"
                }
              ],
              "description": "An offer letter",
              "color": "#fffff"
            }
          }
        ],
        "name": "Pipeline 1",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "api_route": "client.crm.com"
      },
      "description": "Show a pipeline and its stages."
    },
    "FlowAndStatesWithoutCreator": {
      "type": "object",
      "title": "Show flow details and its states",
      "properties": {
        "states": {
          "$ref": "#/definitions/State"
        },
        "flow": {
          "$ref": "#/definitions/Flow"
        }
      },
      "example": {
        "states": [
          {
            "state": "published",
            "order": 1,
            "id": "1232148nb3478"
          }
        ],
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        }
      },
      "description": "Show all details of a flow including all the states undet the flow"
    },
    "Theme": {
      "type": "object",
      "title": "Theme",
      "required": [
        "typescale",
        "font",
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "typescale": {
          "type": "map",
          "description": "Typescale of the theme"
        },
        "name": {
          "type": "string",
          "description": "Theme's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the theme"
        },
        "font": {
          "type": "string",
          "description": "Font name"
        },
        "file": {
          "type": "string",
          "description": "Theme file attachment"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "typescale": {
          "p": "6",
          "h2": "8",
          "h1": "10"
        },
        "name": "Official Letter Theme",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "font": "Malery",
        "file": "/malory.css"
      },
      "description": "A Theme"
    },
    "ContentTypeFieldRequest": {
      "type": "object",
      "title": "Content type field request",
      "properties": {
        "meta": {
          "type": "map",
          "description": "Attributes of the field"
        },
        "key": {
          "type": "string",
          "description": "Name of the field"
        },
        "field_type_id": {
          "type": "string",
          "description": "ID of the field type"
        },
        "description": {
          "type": "string",
          "description": "Field description"
        }
      },
      "example": {
        "meta": {
          "src": "/img/img.png",
          "alt": "Image"
        },
        "key": "position",
        "field_type_id": "asdlkne4781234123clk",
        "descrtiption": "text input"
      },
      "description": "Data to be send to add fields to content type."
    },
    "UpdateFlow": {
      "type": "object",
      "title": "Show flow details",
      "properties": {
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show all details of a flow"
    },
    "RoleGroupRequest": {
      "type": "object",
      "title": "Role group request",
      "required": [
        "name"
      ],
      "properties": {
        "roles": {
          "type": "array",
          "description": "Lists of role id s"
        },
        "name": {
          "type": "string",
          "description": "Role group name"
        },
        "description": {
          "type": "string",
          "description": "Role group description"
        }
      },
      "example": {
        "name": "Chatura",
        "group_roles": [
          {
            "role_id": "sdfsdf-541sdfsd-2256sdf1-1221sd5f"
          },
          {
            "role_id": "sdfsdf-541sdfsd-2256sdf1-1221sd5f"
          },
          {
            "role_id": "sdfsdf-541sdfsd-2256sdf1-1221sd5f"
          }
        ],
        "description": "Team containg 4 roles on management"
      },
      "description": "Role group details"
    },
    "ActivityStreamIndex": {
      "type": "object",
      "title": "Activity Stream",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "activities": {
          "$ref": "#/definitions/ActivityStream"
        }
      },
      "example": {
        "total_pages": 10,
        "total_entries": 100,
        "page_number": 1,
        "activities": [
          {
            "object_details": {
              "name": "Layout 1",
              "id": "jhg1348561234nkjqwd89"
            },
            "object": "Layout:1",
            "meta": {
              "to": {
                "name": "Layout 1"
              },
              "from": ""
            },
            "inserted_at": "2020-01-21T14:00:00Z",
            "actor": "John Doe",
            "action": "create"
          },
          {
            "object_details": {
              "name": "Layout 1"
            },
            "object": "Layout:1,Layout 1",
            "meta": {},
            "inserted_at": "2020-01-21T14:00:00Z",
            "actor": "John Doe",
            "action": "delete"
          }
        ]
      },
      "description": "Activity stream index"
    },
    "Comments": {
      "type": "array",
      "title": "Comment list",
      "items": {
        "$ref": "#/definitions/Comment"
      }
    },
    "BlockRequest": {
      "type": "object",
      "title": "Block Request",
      "required": [
        "dataset",
        "btype",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Block name"
        },
        "endpoint": {
          "type": "string",
          "description": "name of the endpoint going to choose"
        },
        "dataset": {
          "type": "map",
          "description": "Dataset for creating charts"
        },
        "btype": {
          "type": "string",
          "description": "Block type"
        },
        "api_route": {
          "type": "string",
          "description": "Api route to generate chart"
        }
      },
      "example": {
        "name": "Farming",
        "endpoint": "blocks_api",
        "dataset": {
          "width": 512,
          "type": "pie",
          "height": 512,
          "format": "svg",
          "data": [
            {
              "value": 10,
              "label": "January"
            },
            {
              "value": 20,
              "label": "February"
            },
            {
              "value": 5,
              "label": "March"
            },
            {
              "value": 60,
              "label": "April"
            },
            {
              "value": 80,
              "label": "May"
            },
            {
              "value": 70,
              "label": "June"
            },
            {
              "value": 90,
              "label": "Julay"
            }
          ],
          "backgroundColor": "transparent"
        },
        "btype": "pie",
        "api_route": "http://localhost:8080/chart"
      },
      "description": "A block to Be created to add to instances"
    },
    "FlowAndStates": {
      "type": "object",
      "title": "Show flow details and its states",
      "properties": {
        "states": {
          "$ref": "#/definitions/State"
        },
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "states": [
          {
            "state": "published",
            "order": 1,
            "id": "1232148nb3478"
          }
        ],
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show all details of a flow including all the states undet the flow"
    },
    "PipeStageRequestMap": {
      "type": "object",
      "title": "Pipe stage request",
      "properties": {
        "state_id": {
          "type": "string",
          "description": "State UUID"
        },
        "data_template_id": {
          "type": "string",
          "description": "Data template UUID"
        },
        "content_type_id": {
          "type": "string",
          "description": "Content type UUID"
        }
      },
      "example": {
        "state_id": "1232148nb3478",
        "data_template_id": "1232148nb3478",
        "content_type_id": "1232148nb3478"
      },
      "description": "Map with content type, data template and state UUIDs"
    },
    "ContentUpdateRequest": {
      "type": "object",
      "title": "Content update Request",
      "required": [
        "raw"
      ],
      "properties": {
        "serialized": {
          "type": "string",
          "description": "Content serialized data"
        },
        "raw": {
          "type": "string",
          "description": "Content raw data"
        },
        "naration": {
          "type": "string",
          "description": "Naration for updation"
        }
      },
      "example": {
        "serialized": {
          "title": "Title of the content",
          "body": "Body of the content"
        },
        "raw": "Content data",
        "naration": "Revision by manager"
      },
      "description": "Content updation request"
    },
    "Payment": {
      "type": "object",
      "title": "Payment",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the plan last updated"
        },
        "status": {
          "type": "string",
          "description": "Payment status"
        },
        "start_date": {
          "type": "string",
          "description": "Start date of the plan"
        },
        "razorpay_id": {
          "type": "string",
          "description": "Razorpay ID"
        },
        "organisation": {
          "$ref": "#/definitions/Organisation"
        },
        "meta": {
          "type": "map",
          "description": "Razorpay data"
        },
        "invoice_number": {
          "type": "string",
          "description": "Invoice number"
        },
        "invoice": {
          "type": "string",
          "description": "Invoice PDF file line"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the payment made"
        },
        "id": {
          "type": "string",
          "description": "Payment id"
        },
        "end_date": {
          "type": "string",
          "description": "End date of the plan"
        },
        "creator": {
          "$ref": "#/definitions/User"
        },
        "amount": {
          "type": "float",
          "description": "Amount paid"
        },
        "action": {
          "type": "string",
          "description": "The action of payment"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "status": "success",
        "start_date": "2020-01-21T14:00:00Z",
        "razorpay_id": "pay-kmn47ysda",
        "organisation": {
          "updated_at": "2020-01-21T14:00:00Z",
          "phone": "865623232",
          "name_of_cto": "Foo Doo",
          "name_of_ceo": "John Doe",
          "name": "ABC enterprices",
          "logo": "/logo.jpg",
          "legal_name": "ABC enterprices LLC",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "mnbjhb23488n23e",
          "gstin": "32AA65FF56545353",
          "email": "abcent@gmail.com",
          "corporate_id": "BNIJSN1234NGT",
          "address": "#24, XV Building, TS DEB Layout "
        },
        "invoice_number": "WRAFTDOC-Invoice-001",
        "invoice": "uploads/invoice/WRAFTDOC-Invoice-001.pdf",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
        "end_date": "2020-01-21T14:00:00Z",
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "amount": 1000,
        "action": "upgrade"
      },
      "description": "A payment"
    },
    "LockUnlockRequest": {
      "type": "object",
      "title": "Lock unlock request",
      "required": [
        "editable"
      ],
      "properties": {
        "editable": {
          "type": "boolean",
          "description": "Editable"
        }
      },
      "example": {
        "editable": true
      },
      "description": "request to lock or unlock"
    },
    "FieldTypeIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "field_types": {
          "$ref": "#/definitions/FieldTypes"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "field_types": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Date",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "description": "A date field"
          }
        ]
      }
    },
    "ResourceIndex": {
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/Resources"
        }
      },
      "example": {
        "resources": [
          {
            "id": "1232148nb3478",
            "category": "Flow",
            "action": "create"
          },
          {
            "id": "137ykjbefd987132",
            "category": "Flow",
            "action": "update"
          }
        ]
      }
    },
    "Membership": {
      "type": "object",
      "title": "Membership",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the membership last updated"
        },
        "start_end": {
          "type": "string",
          "description": "Start date of membership"
        },
        "plan_duration": {
          "type": "integer",
          "description": "Duration of the membership"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the membership created"
        },
        "id": {
          "type": "string",
          "description": "ID of the membership"
        },
        "end_date": {
          "type": "string",
          "description": "End date of membership"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "start_date": "2020-01-21T14:00:00Z",
        "plan_duration": 30,
        "plan": {
          "yearly_amount": 10,
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Basic",
          "monthly_amount": 6,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
          "description": "A basic plan"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "uhja8324jdadsmsd",
        "end_date": "2020-01-21T14:00:00Z"
      },
      "description": "A Membership object"
    },
    "Permission": {
      "type": "map",
      "title": "A permission JSON response",
      "example": {
        "Flow_create": [
          "user",
          "admin"
        ]
      },
      "description": "JSON response for a permission"
    },
    "ApprovalSystemRequest": {
      "type": "object",
      "title": "ApprovalSystem Request",
      "required": [
        "approver_id",
        "post_state_id",
        "pre_state_id",
        "flow_id"
      ],
      "properties": {
        "pre_state_id": {
          "type": "string",
          "description": "The id of state before"
        },
        "post_state_id": {
          "type": "string",
          "description": "The id of state after"
        },
        "flow_id": {
          "type": "string",
          "description": "The id of flow"
        },
        "approver_id": {
          "type": "string",
          "description": "The id of approver"
        }
      },
      "example": {
        "pre_state_id": "0sdffsafdsaf21f1ds21",
        "post_state_id": "33sdf0a3sf0d300sad",
        "flow_id": "0sdf21d12sdfdfdf",
        "approver_id": "03asdfasfd00f032as"
      },
      "description": "Create approval_system request."
    },
    "StateRequest": {
      "type": "object",
      "title": "State Request",
      "required": [
        "order",
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "description": "State name"
        },
        "order": {
          "type": "integer",
          "description": "State's order"
        }
      },
      "example": {
        "state": "Published",
        "order": 1
      },
      "description": "Create state request."
    },
    "ContentsAndContentTypeAndState": {
      "type": "array",
      "title": "Instances, their content types and states",
      "items": {
        "$ref": "#/definitions/ContentAndContentTypeAndState"
      },
      "description": "IInstances and all its details except creator."
    },
    "ResourceRequest": {
      "type": "object",
      "title": "Resource Request",
      "required": [
        "action",
        "category"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category's name"
        },
        "action": {
          "type": "string",
          "description": "Action name"
        }
      },
      "example": {
        "category": "Flow",
        "action": "create"
      },
      "description": "Create resource request."
    },
    "ShowStates": {
      "type": "array",
      "title": "All states and its details",
      "items": {
        "$ref": "#/definitions/ShowState"
      },
      "description": "All states that have been created and their details"
    },
    "Block": {
      "type": "object",
      "title": "Block",
      "required": [
        "dataset",
        "btype",
        "name"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "tex_chart": {
          "type": "string",
          "description": "Latex code of the pie chart"
        },
        "name": {
          "type": "string",
          "description": "Block name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "input": {
          "type": "string",
          "description": "Input file url"
        },
        "endpoint": {
          "type": "string",
          "description": "name of the endpoint going to choose"
        },
        "dataset": {
          "type": "map",
          "description": "Dataset for creating charts"
        },
        "btype": {
          "type": "string",
          "description": "Block type"
        },
        "api_route": {
          "type": "string",
          "description": "Api route to generate chart"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "tex_chart": "pie [rotate=180]{80/january}",
        "name": "Farming",
        "inserted_at": "2020-02-21T14:00:00Z",
        "input": "uploads/block_input/name.csv",
        "file_url": "/home/sadique/Documents/org.functionary/go/src/blocks_api/002dc916-4444-4072-a8aa-85a32c5a65ea.svg",
        "endpoint": "blocks_api",
        "description": "Description about block",
        "dataset": {
          "width": 512,
          "type": "pie",
          "height": 512,
          "format": "svg",
          "data": [
            {
              "value": 10,
              "label": "January"
            },
            {
              "value": 20,
              "label": "February"
            },
            {
              "value": 5,
              "label": "March"
            },
            {
              "value": 60,
              "label": "April"
            },
            {
              "value": 80,
              "label": "May"
            },
            {
              "value": 70,
              "label": "June"
            },
            {
              "value": 90,
              "label": "Julay"
            }
          ],
          "backgroundColor": "transparent"
        },
        "btype": "pie",
        "api_route": "http://localhost:8080/chart"
      },
      "description": "A Block"
    },
    "FieldType": {
      "type": "object",
      "title": "Field type",
      "required": [
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the field type"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the field type"
        },
        "description": {
          "type": "string",
          "description": "Description of the field type"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Date",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "description": "A date field"
      },
      "description": "A field type."
    },
    "ContentTypeRole": {
      "type": "object",
      "title": "Content type role",
      "properties": {
        "role_id": {
          "type": "string",
          "description": "ID of the role type"
        },
        "content_type_id": {
          "type": "string",
          "description": "ID of the content_type"
        }
      },
      "description": "List of roles under content type"
    },
    "RoleGroup": {
      "type": "object",
      "title": "Role group",
      "properties": {
        "updated_at": {
          "type": "string",
          "description": "Updated at"
        },
        "roles": {
          "type": "array",
          "description": "List of roles"
        },
        "name": {
          "type": "string",
          "description": "Role group name"
        },
        "inserted_at": {
          "type": "string",
          "description": "inserted at"
        },
        "description": {
          "type": "string",
          "description": "Role group description"
        }
      },
      "example": {
        "roles": [
          {
            "name": "manager"
          },
          {
            "name": "CTO"
          },
          {
            "name": "CEO"
          }
        ],
        "name": "Chatura",
        "description": "Team containg 4 roles on management"
      },
      "description": "Role group details"
    },
    "ContentStateUpdateRequest": {
      "type": "object",
      "title": "Content state update Request",
      "required": [
        "state_id"
      ],
      "properties": {
        "state_id": {
          "type": "string",
          "description": "state id"
        }
      },
      "example": {
        "state_id": "kjb12389k23eyg"
      },
      "description": "Content state update request"
    },
    "ActivityStream": {
      "type": "object",
      "title": "Activity Stream",
      "properties": {
        "object_details": {
          "type": "map",
          "description": "Name and ID of the object"
        },
        "object": {
          "type": "string",
          "description": "Activity Object"
        },
        "meta": {
          "type": "map",
          "description": "Meta of the activity"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "actor": {
          "type": "string",
          "description": "Actor name"
        },
        "action": {
          "type": "string",
          "description": "Activity action"
        }
      },
      "description": "Activity stream object"
    },
    "CommentIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "comments": {
          "$ref": "#/definitions/Comments"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "comments": [
          {
            "user_id": "asdf2s2dfasd2",
            "updated_at": "2020-01-21T14:00:00Z",
            "organisation_id": "451s51dfsdf515",
            "meta": {
              "line": 12,
              "block": "introduction"
            },
            "master_id": "sdf15511551sdf",
            "master": "instance",
            "is_parent": true,
            "inserted_at": "2020-02-21T14:00:00Z",
            "comment": "a sample comment"
          },
          {
            "user_id": "asdf2s2dfasd2",
            "updated_at": "2020-01-21T14:00:00Z",
            "organisation_id": "451s51dfsdf515",
            "meta": {
              "line": 12,
              "block": "introduction"
            },
            "master_id": "sdf15511551sdf",
            "master": "instance",
            "is_parent": true,
            "inserted_at": "2020-02-21T14:00:00Z",
            "comment": "a sample comment"
          }
        ]
      }
    },
    "ShowPipeline": {
      "type": "object",
      "title": "Show pipeline",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow last updated"
        },
        "stages": {
          "$ref": "#/definitions/PipeStages"
        },
        "name": {
          "type": "string",
          "description": "Name of the pipeline"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the pipeline"
        },
        "creator": {
          "$ref": "#/definitions/User"
        },
        "api_route": {
          "type": "string",
          "description": "API route of the CRM"
        }
      },
      "description": "Show details of a pipeline"
    },
    "ContentTypeSearch": {
      "type": "object",
      "title": "Content type role",
      "required": [
        "prefix",
        "description"
      ],
      "properties": {
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "id": {
          "type": "string",
          "description": "ID of the content_type"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "total_pages": 1,
        "total_entries": 2,
        "page_number": 1,
        "content_types": [
          {
            "prefix": "ex",
            "id": "466f1fa1-9657-4166-b372-21e8135aeaf1",
            "description": "content type",
            "color": "red"
          }
        ]
      },
      "description": "Search the content search"
    },
    "ResetPasswordRequest": {
      "type": "object",
      "title": "Reset password request",
      "required": [
        "password",
        "token"
      ],
      "properties": {
        "token": {
          "type": "string",
          "description": "Token has given in email"
        },
        "password": {
          "type": "string",
          "description": "New password to update"
        }
      },
      "example": {
        "token": "asddff23a2ds_f3asdf3a21fds23f2as32f3as3f213a2df3s2f3a213sad12f13df13adsf-21f1d3sf",
        "password": "new password"
      },
      "description": "Request to reset password"
    },
    "Profile": {
      "type": "object",
      "title": "Profile",
      "required": [
        "name"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserForProfile"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "profile_pic": {
          "type": "string",
          "description": "path to profile pic"
        },
        "name": {
          "type": "string",
          "description": "Name of the user"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "gender": {
          "type": "string",
          "description": "Users gender"
        },
        "dob": {
          "type": "date",
          "description": "Date of birth"
        }
      },
      "example": {
        "user": {
          "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
          "email": "admin@wraftdocs.com"
        },
        "updated_at": "2020-01-21T14:00:00Z",
        "profile_pic": "/image.png",
        "name": "Jhone",
        "inserted_at": "2020-02-21T14:00:00Z",
        "gender": "Male",
        "dob": "1992-09-24"
      },
      "description": "Profile details"
    },
    "ShowDataTemplate": {
      "type": "object",
      "title": "Data template and all its details",
      "properties": {
        "data_template": {
          "$ref": "#/definitions/LayoutAndEngine"
        },
        "creator": {
          "$ref": "#/definitions/User"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeWithoutFields"
        }
      },
      "example": {
        "data_template": {
          "updated_at": "2020-01-21T14:00:00Z",
          "title_template": "Letter for [user]",
          "title": "Main Template",
          "serialized": {
            "title": "Offer letter of [client]",
            "data": "Hi [user]"
          },
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "data": "Hi [user]"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "prefix": "OFFLET",
          "name": "Offer letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "description": "An offer letter"
        }
      },
      "description": "API to show a data template and all its details"
    },
    "OrganisationFields": {
      "type": "array",
      "title": "Field response array",
      "items": {
        "$ref": "#/definitions/OrganisationField"
      },
      "description": "List of field type in response."
    },
    "UserRegisterRequest": {
      "type": "object",
      "title": "Register User",
      "required": [
        "password",
        "email",
        "name"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "name": {
          "type": "string",
          "description": "User's name"
        },
        "email": {
          "type": "string",
          "description": "User's email"
        }
      },
      "example": {
        "password": "Password",
        "name": "John Doe",
        "email": "email@xyz.com"
      },
      "description": "A user to be registered in the application"
    },
    "PaymentIndex": {
      "type": "object",
      "title": "Payment index",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "payments": {
          "$ref": "#/definitions/Payments"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "payments": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "status": "success",
            "start_date": "2020-01-21T14:00:00Z",
            "razorpay_id": "pay-kmn47ysda",
            "organisation": {
              "updated_at": "2020-01-21T14:00:00Z",
              "phone": "865623232",
              "name_of_cto": "Foo Doo",
              "name_of_ceo": "John Doe",
              "name": "ABC enterprices",
              "logo": "/logo.jpg",
              "legal_name": "ABC enterprices LLC",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "mnbjhb23488n23e",
              "gstin": "32AA65FF56545353",
              "email": "abcent@gmail.com",
              "corporate_id": "BNIJSN1234NGT",
              "address": "#24, XV Building, TS DEB Layout "
            },
            "invoice_number": "WRAFTDOC-Invoice-001",
            "invoice": "uploads/invoice/WRAFTDOC-Invoice-001.pdf",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
            "end_date": "2020-01-21T14:00:00Z",
            "creator": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "John Doe",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "email_verify": true,
              "email": "email@xyz.com"
            },
            "amount": 1000,
            "action": "upgrade"
          }
        ],
        "page_number": 1
      },
      "description": "Payment index with pagination"
    },
    "PipeStage": {
      "type": "object",
      "title": "Pipeline stage",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the pipe stage last updated"
        },
        "state": {
          "$ref": "#/definitions/State"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the pipe stage inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the pipe stage"
        },
        "data_template": {
          "$ref": "#/definitions/DataTemplate"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeWithFields"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "state": {
          "updated_at": "2020-01-21T14:00:00Z",
          "state": "published",
          "order": 1,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "kjasfqjbn",
        "data_template": {
          "updated_at": "2020-01-21T14:00:00Z",
          "title_template": "Letter for [user]",
          "title": "Template 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "data": "Hi [user]"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "prefix": "OFFLET",
          "name": "Offer letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "fields": [
            {
              "meta": {
                "src": "/img/img.png",
                "alt": "Image"
              },
              "key": "position",
              "field_type_id": "kjb14713132lkdac"
            },
            {
              "meta": {
                "src": "/img/img.png",
                "alt": "Image"
              },
              "key": "name",
              "field_type_id": "kjb2347mnsad"
            }
          ],
          "description": "An offer letter",
          "color": "#fffff"
        }
      },
      "description": "One stage in a pipeline."
    },
    "Flow": {
      "type": "object",
      "title": "Flow",
      "required": [
        "controlled"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the flow"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the flow"
        },
        "controlled": {
          "type": "boolean",
          "description": "Specifying controlled or uncontrolled flows"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Flow 1",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "controlled": true
      },
      "description": "Flows to be followed in an organisation"
    },
    "DataTemplateAndContentType": {
      "type": "object",
      "title": "Data Template and its content type",
      "required": [
        "title_template",
        "title",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "title_template": {
          "type": "string",
          "description": "Title content of the data template"
        },
        "title": {
          "type": "string",
          "description": "Title of the data template"
        },
        "serialized": {
          "type": "map",
          "description": "Serialized data"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the data template"
        },
        "data": {
          "type": "string",
          "description": "Data template's contents"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeWithoutFields"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "title_template": "Letter for [user]",
        "title": "Template 1",
        "serialized": {
          "title": "Offer letter of [client]",
          "data": "Hi [user]"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "data": "Hi [user]",
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "prefix": "OFFLET",
          "name": "Offer letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "description": "An offer letter",
          "color": "#fffff"
        }
      },
      "description": "A Data Template and its content type"
    },
    "ContentTypeField": {
      "type": "object",
      "title": "Content type field in response",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of content type field"
        },
        "meta": {
          "type": "map",
          "description": "Attributes of the field"
        },
        "id": {
          "type": "string",
          "description": "ID of content type field"
        },
        "field_type": {
          "$ref": "#/definitions/FieldType"
        }
      },
      "example": {
        "meta": {
          "src": "/img/img.png",
          "alt": "Image"
        },
        "key": "position",
        "field_type_id": "asdlkne4781234123clk"
      },
      "description": "Content type field in respone."
    },
    "ContentTypeAndLayout": {
      "type": "object",
      "title": "Content Type and Layout",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "fields": {
          "$ref": "#/definitions/ContentTypeFields"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "layout": {
          "width": 40.0,
          "updated_at": "2020-01-21T14:00:00Z",
          "unit": "cm",
          "slug_file": "/letter.zip",
          "slug": "Pandoc",
          "name": "Official Letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "height": 20.0,
          "description": "An official letter"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "fields": [
          {
            "key": "position",
            "field_type_id": "kjb14713132lkdac"
          },
          {
            "key": "name",
            "field_type_id": "kjb2347mnsad"
          }
        ],
        "description": "An offer letter",
        "color": "#fffff"
      },
      "description": "Content Type to be used for the generation of a document and its layout."
    },
    "OrganisationField": {
      "type": "object",
      "title": "Organisation field in response",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of Organisation field"
        },
        "meta": {
          "type": "map",
          "description": "Attributes of the field"
        },
        "id": {
          "type": "string",
          "description": "ID of Organisation field"
        },
        "field_type": {
          "$ref": "#/definitions/FieldType"
        }
      },
      "example": {
        "name": "position",
        "meta": {
          "src": "/img/img.png",
          "alt": "Image"
        },
        "field_type_id": "asdlkne4781234123clk"
      },
      "description": "Organisation field in respone."
    },
    "Change": {
      "type": "object",
      "title": "List of changes",
      "properties": {
        "ins": {
          "type": "array"
        },
        "del": {
          "type": "array"
        }
      },
      "example": {
        "ins": [
          "testing version succesufll"
        ],
        "del": [
          "testing version"
        ]
      },
      "description": "Lists the chenges on a version"
    },
    "ApprovalSystem": {
      "type": "object",
      "title": "ApprovalSystem",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the approval_system last updated"
        },
        "pre_state": {
          "$ref": "#/definitions/State"
        },
        "post_state": {
          "$ref": "#/definitions/State"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the approval_system inserted"
        },
        "approver": {
          "$ref": "#/definitions/Approver"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "pre_state": {
          "state": "Draft",
          "id": "0sdffsafdsaf21f1ds21"
        },
        "post_state": {
          "state": "Publish",
          "id": "33sdf0a3sf0d300sad"
        },
        "instance": {
          "id": "0sdf21d12sdfdfdf"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "approver": {
          "name": "Approver",
          "id": "03asdfasfd00f0302as"
        }
      },
      "description": "A ApprovalSystem"
    },
    "NotificationRequest": {
      "type": "object",
      "title": "Notification request",
      "properties": {
        "recipient_id": {
          "type": "string",
          "description": "Recipient id"
        },
        "actor_id": {
          "type": "strign",
          "description": "actor uuid"
        },
        "action": {
          "type": "string",
          "description": "action"
        }
      },
      "example": {
        "recipient_id": "125sdd1f51sf",
        "actor_id": "511d5sfad4-sdf55fd-sdf151",
        "action": "assigned_as_approver"
      },
      "description": "Notification "
    },
    "ListOfOrganisations": {
      "type": "array",
      "title": "Organisations array",
      "items": {
        "$ref": "#/definitions/Organisation"
      },
      "description": "List of existing Organisations"
    },
    "BlockTemplateIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "block_templates": {
          "$ref": "#/definitions/BlockTemplates"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "block_templates": [
          {
            "title": "a sample title",
            "serialized": "a sample serialized",
            "body": "a sample body"
          },
          {
            "title": "a sample title",
            "serialized": "a sample serialized",
            "body": "a sample body"
          }
        ]
      }
    },
    "ContentTypeAndLayoutAndFlow": {
      "type": "object",
      "title": "Content Type, Layout and its flow",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "fields": {
          "$ref": "#/definitions/ContentTypeFields"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "layout": {
          "width": 40.0,
          "updated_at": "2020-01-21T14:00:00Z",
          "unit": "cm",
          "slug_file": "/letter.zip",
          "slug": "Pandoc",
          "name": "Official Letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "height": 20.0,
          "description": "An official letter"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "fields": [
          {
            "key": "position",
            "field_type_id": "kjb14713132lkdac"
          },
          {
            "key": "name",
            "field_type_id": "kjb2347mnsad"
          }
        ],
        "description": "An offer letter",
        "color": "#fffff"
      },
      "description": "Content Type to be used for the generation of a document, its layout and flow."
    },
    "OnlyMembership": {
      "type": "object",
      "title": "A Membership",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the membership last updated"
        },
        "start_end": {
          "type": "string",
          "description": "Start date of membership"
        },
        "plan_duration": {
          "type": "integer",
          "description": "Duration of the membership"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the membership created"
        },
        "id": {
          "type": "string",
          "description": "ID of the membership"
        },
        "end_date": {
          "type": "string",
          "description": "End date of membership"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "start_date": "2020-01-21T14:00:00Z",
        "plan_duration": 30,
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "uhja8324jdadsmsd",
        "end_date": "2020-01-21T14:00:00Z"
      },
      "description": "A Membership without plan details"
    },
    "CollectionFormFieldRequest": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "title of the collection form field"
        },
        "id": {
          "type": "string",
          "description": "The ID of the collection form field"
        },
        "description": {
          "type": "string",
          "description": "description for collection form field"
        }
      },
      "example": {
        "name": "Collection Form Field",
        "description": "collection form",
        "collection_form_id": "collection form id"
      },
      "description": "Collection Form Field"
    },
    "DataTemplates": {
      "type": "array",
      "title": "Data templates under a content type",
      "items": {
        "$ref": "#/definitions/DataTemplate"
      },
      "description": "All data template that have been created under a content type"
    },
    "InstanceApprovalSystemIndex": {
      "type": "object",
      "title": "Instance approval system indes",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total entries"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "instance_approval_systems": {
          "$ref": "#/definitions/InstanceApprovalSystems"
        }
      },
      "example": {
        "total_pages": 1,
        "total_entries": 1,
        "page_number": 1,
        "instance_approval_systems": [
          {
            "order": 1,
            "instance": {
              "updated_at": "2020-01-21T14:00:00Z",
              "serialized": {
                "title": "Title of the content",
                "body": "Body of the content"
              },
              "raw": "Content",
              "instance_id": "OFFL01",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "build": "/uploads/OFFL01/final.pdf"
            },
            "id": "26ds-s4fd5-sd1f541-sdf415sd",
            "flag": false,
            "approval_system": {
              "updated_at": "2020-01-21T14:00:00Z",
              "pre_state": {
                "state": "Draft",
                "id": "0sdffsafdsaf21f1ds21"
              },
              "post_state": {
                "state": "Publish",
                "id": "33sdf0a3sf0d300sad"
              },
              "instance": {
                "id": "0sdf21d12sdfdfdf"
              },
              "inserted_at": "2020-02-21T14:00:00Z",
              "approver": {
                "name": "Approver",
                "id": "03asdfasfd00f0302as"
              }
            }
          }
        ]
      },
      "description": "Page containis all instance approval systems"
    },
    "ProfileRequest": {
      "type": "object",
      "title": "Profile Request",
      "required": [
        "name"
      ],
      "properties": {
        "profile_pic": {
          "type": "string",
          "description": "path to profile pic"
        },
        "name": {
          "type": "string",
          "description": "Name of the user"
        },
        "gender": {
          "type": "string",
          "description": "Users gender"
        },
        "dob": {
          "type": "date",
          "description": "Date of birth"
        }
      },
      "example": {
        "profile_pic": "/image.png",
        "name": "Jhone",
        "gender": "Male",
        "dob": "1992-09-24"
      },
      "description": "User profile details to create"
    },
    "Resources": {
      "type": "array",
      "title": "Resource list",
      "items": {
        "$ref": "#/definitions/Resource"
      }
    },
    "ShowContentType": {
      "type": "object",
      "title": "Content Type and all its details",
      "properties": {
        "creator": {
          "$ref": "#/definitions/User"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeAndLayoutAndFlowAndStates"
        }
      },
      "example": {
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "prefix": "OFFLET",
          "name": "Offer letter",
          "layout": {
            "width": 40.0,
            "updated_at": "2020-01-21T14:00:00Z",
            "unit": "cm",
            "slug_file": "/letter.zip",
            "slug": "Pandoc",
            "name": "Official Letter",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "height": 20.0,
            "description": "An official letter"
          },
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "flow": {
            "updated_at": "2020-01-21T14:00:00Z",
            "states": [
              {
                "state": "published",
                "order": 1,
                "id": "1232148nb3478"
              }
            ],
            "name": "Flow 1",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478"
          },
          "fields": [
            {
              "key": "position",
              "field_type_id": "kjb14713132lkdac"
            },
            {
              "key": "name",
              "field_type_id": "kjb2347mnsad"
            }
          ],
          "description": "An offer letter",
          "color": "#fffff"
        }
      },
      "description": "API to show a content type and all its details"
    },
    "ControlledFlowRequest": {
      "type": "object",
      "required": [
        "control_data",
        "controlled",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Flow name"
        },
        "controlled": {
          "type": "boolean",
          "description": "Specifying controlled or uncontrolled flows"
        },
        "control_data": {
          "type": "map",
          "description": "Approval system data"
        }
      },
      "example": {
        "name": "Flow 2",
        "controlled": true,
        "control_data": {
          "pre_state": "review",
          "post_state": "publish",
          "approver": "user_id"
        }
      },
      "description": "Create controlled flow request"
    },
    "DataTemplate": {
      "type": "object",
      "title": "Data Template",
      "required": [
        "title_template",
        "title",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "title_template": {
          "type": "string",
          "description": "Title content of the data template"
        },
        "title": {
          "type": "string",
          "description": "Title of the data template"
        },
        "serialized": {
          "type": "map",
          "description": "Serialized data"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the data template"
        },
        "data": {
          "type": "string",
          "description": "Data template's contents"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "title_template": "Letter for [user]",
        "title": "Template 1",
        "serialized": {
          "title": "Offer letter of [client]",
          "data": "Hi [user]"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "data": "Hi [user]"
      },
      "description": "A Data Template"
    },
    "State": {
      "type": "object",
      "title": "State",
      "properties": {
        "state": {
          "type": "string",
          "description": "State of the content"
        },
        "id": {
          "type": "string",
          "description": "States id"
        }
      },
      "description": "States of content"
    },
    "Asset": {
      "type": "object",
      "title": "Asset",
      "required": [
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the asset"
        },
        "file": {
          "type": "string",
          "description": "URL of the uploaded file"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Asset",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "file": "/signature.pdf"
      },
      "description": "An asset."
    },
    "CollectionFormRequest": {
      "type": "object",
      "title": "Collection Form",
      "properties": {
        "title": {
          "type": "string",
          "description": "title of the collection form"
        },
        "fields": {
          "type": "array",
          "description": "Form fields"
        },
        "description": {
          "type": "string",
          "description": "description for collection form"
        }
      },
      "example": {
        "title": "Collection Form",
        "fields": [
          {
            "name": "Title",
            "meta": {
              "color": "black"
            },
            "field_type": "string"
          }
        ],
        "description": "collection form"
      },
      "description": "Collection Form"
    },
    "ThemeIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "themes": {
          "$ref": "#/definitions/Themes"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "themes": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "typescale": {
              "p": "6",
              "h2": "8",
              "h1": "10"
            },
            "name": "Official Letter Theme",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "font": "Malery",
            "file": "/malory.css"
          }
        ],
        "page_number": 1
      }
    },
    "Approved": {
      "type": "object",
      "title": "Approve content",
      "properties": {
        "pre_state": {
          "$ref": "#/definitions/State"
        },
        "post_stae": {
          "$ref": "#/definitions/State"
        },
        "instance": {
          "$ref": "#/definitions/ApprovedInstance"
        },
        "approved": {
          "type": "boolean",
          "description": "The system has been approved"
        }
      },
      "example": {
        "pre_state": {
          "state": "Draft",
          "id": "sdfasdf32ds6f2as6f262saf62"
        },
        "post_state": {
          "state": "Publish",
          "id": "dsadsffasdfsfasdff2asdf32f"
        },
        "instance": {
          "stete_id": "2a2ds3fads3f2sd66s2adf6",
          "state": "Publish",
          "id": "3adfafd12a1fsd561a1df"
        },
        "approved": true
      },
      "description": "To approve a content"
    },
    "CollectionFormShow": {
      "type": "object",
      "title": "Show collection form",
      "required": [
        "id"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "title of the collection form"
        },
        "id": {
          "type": "string",
          "description": "The ID of the collection form"
        },
        "description": {
          "type": "string",
          "description": "Description for title"
        }
      },
      "example": {
        "collection_form": {
          "updated_at": "2020-01-21T14:00:00Z",
          "title": "Collection Form",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        }
      },
      "description": "show collection form and its details"
    },
    "InstanceApprovalSystem": {
      "type": "object",
      "title": "Instance approval system",
      "properties": {
        "order": {
          "type": "integer",
          "description": "Order of the pre state of the approval system"
        },
        "instance": {
          "$ref": "#/definitions/Instance"
        },
        "id": {
          "type": "string",
          "description": "id"
        },
        "flag": {
          "type": "boolean",
          "description": "Flag to specify approved or not"
        },
        "approval_system": {
          "$ref": "#/definitions/ApprovalSystem"
        }
      },
      "example": {
        "order": 1,
        "instance": {
          "updated_at": "2020-01-21T14:00:00Z",
          "serialized": {
            "title": "Title of the content",
            "body": "Body of the content"
          },
          "raw": "Content",
          "instance_id": "OFFL01",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "build": "/uploads/OFFL01/final.pdf"
        },
        "id": "26ds-s4fd5-sd1f541-sdf415sd",
        "flag": false,
        "approval_system": {
          "updated_at": "2020-01-21T14:00:00Z",
          "pre_state": {
            "state": "Draft",
            "id": "0sdffsafdsaf21f1ds21"
          },
          "post_state": {
            "state": "Publish",
            "id": "33sdf0a3sf0d300sad"
          },
          "instance": {
            "id": "0sdf21d12sdfdfdf"
          },
          "inserted_at": "2020-02-21T14:00:00Z",
          "approver": {
            "name": "Approver",
            "id": "03asdfasfd00f0302as"
          }
        }
      },
      "description": "Approval system to follow by an instance"
    },
    "ShowAsset": {
      "type": "object",
      "title": "Show asset",
      "properties": {
        "creator": {
          "$ref": "#/definitions/User"
        },
        "content": {
          "$ref": "#/definitions/Asset"
        }
      },
      "example": {
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "asset": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Asset",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "file": "/signature.pdf"
        }
      },
      "description": "An asset and its details"
    },
    "DataTemplateRequest": {
      "type": "object",
      "title": "Data template Request",
      "required": [
        "serialized",
        "data",
        "title_template",
        "title"
      ],
      "properties": {
        "title_template": {
          "type": "string",
          "description": "Title template"
        },
        "title": {
          "type": "string",
          "description": "Data template's title"
        },
        "serialized": {
          "type": "map",
          "description": "Serialized data"
        },
        "data": {
          "type": "string",
          "description": "Data template's contents"
        }
      },
      "example": {
        "title_template": "Letter for [user]",
        "title": "Template 1",
        "serialized": {
          "title": "Offer letter of [client]",
          "data": "Hi [user]"
        },
        "data": "Hi [user]"
      },
      "description": "Create data template request."
    },
    "UserForProfile": {
      "type": "object",
      "title": "User",
      "properties": {
        "id": {
          "type": "string",
          "description": "User id"
        },
        "email": {
          "type": "string",
          "description": "Email id"
        }
      },
      "example": {
        "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
        "email": "admin@wraftdocs.com"
      },
      "description": "User login details"
    },
    "VendorIndex": {
      "type": "object",
      "properties": {
        "vendors": {
          "$ref": "#/definitions/Vendors"
        },
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "vendors": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "reg_no": "ASD21122",
            "phone": "98565262262",
            "name": "Vos Services",
            "inserted_at": "2020-02-21T14:00:00Z",
            "gstin": "32ADF22SDD2DFS32SDF",
            "email": "serv@vosmail.com",
            "contact_person": "vikas abu",
            "address": "rose boru, hourbures"
          },
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "reg_no": "ASD21122",
            "phone": "98565262262",
            "name": "Vos Services",
            "inserted_at": "2020-02-21T14:00:00Z",
            "gstin": "32ADF22SDD2DFS32SDF",
            "email": "serv@vosmail.com",
            "contact_person": "vikas abu",
            "address": "rose boru, hourbures"
          }
        ],
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1
      }
    },
    "PipelineRequest": {
      "type": "object",
      "title": "Pipeline Request",
      "required": [
        "api_route",
        "name"
      ],
      "properties": {
        "stages": {
          "$ref": "#/definitions/PipeStageRequest"
        },
        "name": {
          "type": "string",
          "description": "Pipeline's name"
        },
        "api_route": {
          "type": "string",
          "description": "Pipeline's API route"
        }
      },
      "example": {
        "stages": [
          {
            "state_id": "kjwe1823786b3478",
            "data_template_id": "23e40p9lknsd478",
            "content_type_id": "12lkjn3490u12"
          },
          {
            "state_id": "1232148nb3478",
            "data_template_id": "1232148nb3478",
            "content_type_id": "1232148nb3478"
          }
        ],
        "name": "Pipeline 1",
        "api_route": "client.crm.com"
      },
      "description": "Create pipeline request."
    },
    "ShowPayment": {
      "type": "object",
      "title": "Show a Payment",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the plan last updated"
        },
        "to_plan": {
          "$ref": "#/definitions/Plan"
        },
        "status": {
          "type": "string",
          "description": "Payment status"
        },
        "start_date": {
          "type": "string",
          "description": "Start date of the plan"
        },
        "razorpay_id": {
          "type": "string",
          "description": "Razorpay ID"
        },
        "organisation": {
          "$ref": "#/definitions/Organisation"
        },
        "meta": {
          "type": "map",
          "description": "Razorpay data"
        },
        "membership": {
          "$ref": "#/definitions/OnlyMembership"
        },
        "invoice_number": {
          "type": "string",
          "description": "Invoice number"
        },
        "invoice": {
          "type": "string",
          "description": "Invoice PDF file line"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the payment made"
        },
        "id": {
          "type": "string",
          "description": "Payment id"
        },
        "from_plan": {
          "$ref": "#/definitions/Plan"
        },
        "end_date": {
          "type": "string",
          "description": "End date of the plan"
        },
        "creator": {
          "$ref": "#/definitions/User"
        },
        "amount": {
          "type": "float",
          "description": "Amount paid"
        },
        "action": {
          "type": "string",
          "description": "The action of payment"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "to_plan": {
          "yearly_amount": 10,
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Basic",
          "monthly_amount": 6,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
          "description": "A basic plan"
        },
        "status": "success",
        "start_date": "2020-01-21T14:00:00Z",
        "razorpay_id": "pay-kmn47ysda",
        "organisation": {
          "updated_at": "2020-01-21T14:00:00Z",
          "phone": "865623232",
          "name_of_cto": "Foo Doo",
          "name_of_ceo": "John Doe",
          "name": "ABC enterprices",
          "logo": "/logo.jpg",
          "legal_name": "ABC enterprices LLC",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "mnbjhb23488n23e",
          "gstin": "32AA65FF56545353",
          "email": "abcent@gmail.com",
          "corporate_id": "BNIJSN1234NGT",
          "address": "#24, XV Building, TS DEB Layout "
        },
        "membership": {
          "updated_at": "2020-01-21T14:00:00Z",
          "start_date": "2020-01-21T14:00:00Z",
          "plan_duration": 30,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "uhja8324jdadsmsd",
          "end_date": "2020-01-21T14:00:00Z"
        },
        "invoice_number": "WRAFTDOC-Invoice-001",
        "invoice": "uploads/invoice/WRAFTDOC-Invoice-001.pdf",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
        "from_plan": {
          "yearly_amount": 10,
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Basic",
          "monthly_amount": 6,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
          "description": "A basic plan"
        },
        "end_date": "2020-01-21T14:00:00Z",
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "amount": 1000,
        "action": "upgrade"
      },
      "description": "Show a payment"
    },
    "Approver": {
      "type": "object",
      "title": "Approver",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the approver"
        },
        "id": {
          "type": "string",
          "description": "Approvers id"
        }
      },
      "description": "Approver of the content"
    },
    "DeletedPipeStage": {
      "type": "object",
      "title": "Deleted pipe stage",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the pipe stage last updated"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the pipe stage inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the pipe stage"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "kjasfqjbn"
      },
      "description": "Response when a pipe stage is deleted"
    },
    "Plan": {
      "type": "object",
      "title": "Plan",
      "properties": {
        "yearly_amount": {
          "type": "integer",
          "description": "Yearly amount of the plan"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the plan last updated"
        },
        "name": {
          "type": "string",
          "description": "Plan name"
        },
        "monthly_amount": {
          "type": "integer",
          "description": "Monthly amount of the plan"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the plan inserted"
        },
        "id": {
          "type": "string",
          "description": "Plan id"
        },
        "description": {
          "type": "string",
          "description": "Plan description"
        }
      },
      "example": {
        "yearly_amount": 10,
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Basic",
        "monthly_amount": 6,
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "c68b0988-790b-45e8-965c-c4aeb427e70d",
        "description": "A basic plan"
      },
      "description": "A plan"
    },
    "User": {
      "type": "object",
      "title": "User",
      "properties": {
        "name": {
          "type": "string",
          "description": "Users name"
        },
        "email": {
          "type": "string",
          "description": "Users email"
        }
      },
      "example": {
        "name": "user name",
        "email": "user@gmai.com"
      },
      "description": "user details"
    },
    "Content": {
      "type": "object",
      "title": "Content",
      "required": [
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "serialized": {
          "type": "map",
          "description": "Serialized data of the content"
        },
        "raw": {
          "type": "string",
          "description": "Raw data of the content"
        },
        "instance_id": {
          "type": "string",
          "description": "A unique ID generated for the content"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content"
        },
        "build": {
          "type": "string",
          "description": "URL of the build document"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "serialized": {
          "title": "Title of the content",
          "body": "Body of the content"
        },
        "raw": "Content",
        "instance_id": "OFFL01",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "build": "/uploads/OFFL01/final.pdf"
      },
      "description": "A content, which is then used to generate the out files."
    },
    "PermissionRequest": {
      "type": "object",
      "title": "Permission Request",
      "required": [
        "resource_uuid",
        "role_uuid"
      ],
      "properties": {
        "role_uuid": {
          "type": "string",
          "description": "Role ID"
        },
        "resource_uuid": {
          "type": "string",
          "description": "Resource ID"
        }
      },
      "example": {
        "role_uuid": "jb3123jbiu1293",
        "resource_uuid": "kjb3476123"
      },
      "description": "Create permission request."
    },
    "PlanRequest": {
      "type": "object",
      "title": "Plan request",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "yearly_amount": {
          "type": "integer",
          "description": "Yearly amount of the plan"
        },
        "name": {
          "type": "string",
          "description": "Plan name"
        },
        "monthly_amount": {
          "type": "integer",
          "description": "Monthly amount of the plan"
        },
        "description": {
          "type": "string",
          "description": "Plan description"
        }
      },
      "example": {
        "yearly_amount": 10,
        "name": "Basic",
        "monthly_amount": 6,
        "description": "A basic plan"
      },
      "description": "Plan create/update request"
    },
    "InvitedResponse": {
      "type": "object",
      "title": "Invite user response",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "type": "string",
          "description": "Info"
        }
      },
      "example": {
        "info": "Invited successfully.!"
      },
      "description": "Invite user response"
    },
    "GeneralResponse": {
      "type": "object",
      "title": "General response",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "type": "string",
          "description": "Response message"
        }
      },
      "example": {
        "info": "Trigger accepted."
      },
      "description": "Response for pipeline trigger and bulk jobs."
    },
    "ControlledFlow": {
      "type": "object",
      "title": "Controlled Flow",
      "required": [
        "control_data",
        "controlled"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the flow"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the flow"
        },
        "controlled": {
          "type": "boolean",
          "description": "Specifying controlled or uncontrolled flows"
        },
        "control_data": {
          "type": "map",
          "description": "Approval system data"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Flow 1",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "controlled": true,
        "control_data": {
          "pre_state": "review",
          "post_state": "publish",
          "approver": "user_id"
        }
      },
      "description": "Flows to be followed in an organisation"
    },
    "FlowRequest": {
      "type": "object",
      "title": "Flow Request",
      "required": [
        "controlled",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Flow's name"
        },
        "controlled": {
          "type": "boolean",
          "description": "Specifying controlled or uncontrolled flows"
        }
      },
      "example": {
        "name": "Flow 1",
        "controlled": false
      },
      "description": "Create flow request."
    },
    "DeleteContentTypeRole": {
      "type": "object",
      "title": "Delete Content Type",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the content_type_role"
        }
      },
      "description": "delete a content type role"
    },
    "ContentTypeFieldRequests": {
      "type": "array",
      "title": "Field request array",
      "items": {
        "$ref": "#/definitions/ContentTypeFieldRequest"
      },
      "description": "List of data to be send to add fields to content type."
    },
    "TriggerHistoryIndex": {
      "type": "object",
      "properties": {
        "trigger_history": {
          "$ref": "#/definitions/TriggerHistories"
        },
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "triggers": [
          {
            "zip_file": "builds-2020-01-21T14:11:58.565745Z.zip",
            "updated_at": "2020-01-21T14:00:00Z",
            "state": "success",
            "start_time": "2020-01-21 14:00:00",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "jhdiuh23y498sjdbda",
            "error": {},
            "end_time": "2020-01-21 14:12:00",
            "duration": 720,
            "data": {
              "name": "John Doe"
            },
            "creator": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "John Doe",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "email_verify": true,
              "email": "email@xyz.com"
            }
          }
        ],
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1
      }
    },
    "Payments": {
      "type": "array",
      "title": "All payments of an organisation",
      "items": {
        "$ref": "#/definitions/Payment"
      },
      "description": "All plans that have been done by an organisation"
    },
    "PipelineIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "flows": {
          "$ref": "#/definitions/Pipelines"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "pipelines": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Pipeline 1",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "api_route": "client.crm.com"
          }
        ],
        "page_number": 1
      }
    },
    "PermissionIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "permissions": {
          "$ref": "#/definitions/Permission"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "permissions": [
          {
            "Flow_create": [
              {
                "permission": {
                  "resource_id": "nnbj12378123m",
                  "id": "1237-gh34813"
                },
                "name": "user",
                "id": "5613hbkqew67134"
              },
              {
                "permission": {
                  "resource_id": "  bnjcasd-123ln13248-kjcns",
                  "id": "1237-glkn348-123"
                },
                "name": "admin",
                "id": "87612-1230981230123"
              }
            ]
          },
          {
            "Flow_delete": [
              {
                "permission": {
                  "resource_id": "nnbj12378123m",
                  "id": "1237-gh34813"
                },
                "name": "user",
                "id": "5613hbkqew67134"
              }
            ]
          }
        ]
      }
    },
    "ShowState": {
      "type": "object",
      "title": "Show flow details",
      "properties": {
        "state": {
          "$ref": "#/definitions/State"
        },
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "state": {
          "updated_at": "2020-01-21T14:00:00Z",
          "state": "published",
          "order": 1,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "jnb234881adsad"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show all details of a flow"
    },
    "AuthToken": {
      "type": "object",
      "title": "Auth token",
      "properties": {
        "info": {
          "type": "string",
          "description": "Response info"
        }
      },
      "example": {
        "info": "A password reset link has been sent to your email.!"
      },
      "description": "Response for reset password request"
    },
    "LayoutAndEngine": {
      "type": "object",
      "title": "Layout and Engine",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "width": {
          "type": "float",
          "description": "Width of the layout"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "unit": {
          "type": "string",
          "description": "Unit of dimensions"
        },
        "slug_file": {
          "type": "string",
          "description": "URL of the uploaded slug file"
        },
        "slug": {
          "type": "string",
          "description": "Name of the slug to be used for the layout"
        },
        "screenshot": {
          "type": "string",
          "description": "URL of the uploaded screenshot"
        },
        "name": {
          "type": "string",
          "description": "Layout's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the layout"
        },
        "height": {
          "type": "float",
          "description": "Height of the layout"
        },
        "engine": {
          "$ref": "#/definitions/Engine"
        },
        "description": {
          "type": "string",
          "description": "Layout's description"
        },
        "assets": {
          "$ref": "#/definitions/Assets"
        }
      },
      "example": {
        "width": 40.0,
        "updated_at": "2020-01-21T14:00:00Z",
        "unit": "cm",
        "slug_file": "/official_letter.zip",
        "slug": "Pandoc",
        "screenshot": "/official_letter.jpg",
        "name": "Official Letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "height": 20.0,
        "engine": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Pandoc",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "api_route": ""
        },
        "description": "An official letter",
        "assets": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Asset",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "file": "/signature.pdf"
          }
        ]
      },
      "description": "Layout to be used for the generation of a document."
    },
    "PipeStages": {
      "type": "array",
      "title": "Pipe stages list",
      "items": {
        "$ref": "#/definitions/PipeStage"
      },
      "description": "List of pipe stages"
    },
    "Error": {
      "type": "object",
      "title": "Errors",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string",
          "description": "The message of the error raised"
        }
      },
      "description": "Error responses from the API"
    },
    "FieldTypeRequest": {
      "type": "object",
      "title": "Field type request",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the field type"
        },
        "description": {
          "type": "string",
          "description": "Description of the field type"
        }
      },
      "example": {
        "name": "Date",
        "description": "A date field"
      },
      "description": "Field type request"
    },
    "Plans": {
      "type": "array",
      "title": "All plans",
      "items": {
        "$ref": "#/definitions/Plan"
      },
      "description": "All plans that have been created"
    },
    "UserToken": {
      "type": "object",
      "title": "User and token",
      "required": [
        "token"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "token": {
          "type": "string",
          "description": "JWT token for authenticating the user"
        }
      },
      "example": {
        "user": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "token": "Asdlkqweb.Khgqiwue132.xcli123"
      },
      "description": "User details with the generated JWT token for authentication"
    },
    "Engine": {
      "type": "object",
      "title": "Render engine",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "name": {
          "type": "string",
          "description": "Engine's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the engine"
        },
        "api_route": {
          "type": "string",
          "description": "API route to be used"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Pandoc",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "api_route": ""
      },
      "description": "A render engine to be used for document generation"
    },
    "ContentsIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "contents": {
          "$ref": "#/definitions/ContentsAndContentTypeAndState"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "contents": [
          {
            "vendor": {
              "reg_no": "ASD21122",
              "phone": "98565262262",
              "name": "Vos Services",
              "gstin": "32ADF22SDD2DFS32SDF",
              "email": "serv@vosmail.com",
              "contact_person": "vikas abu",
              "address": "rose boru, hourbures"
            },
            "state": {
              "updated_at": "2020-01-21T14:00:00Z",
              "state": "published",
              "order": 1,
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478"
            },
            "content_type": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "Offer letter",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "fields": {
                "position": "string",
                "name": "string",
                "joining_date": "date",
                "approved_by": "string"
              },
              "description": "An offer letter"
            },
            "content": {
              "updated_at": "2020-01-21T14:00:00Z",
              "serialized": {
                "title": "Title of the content",
                "body": "Body of the content"
              },
              "raw": "Content",
              "instance_id": "OFFL01",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478"
            }
          }
        ]
      }
    },
    "AssetsIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "assets": {
          "$ref": "#/definitions/Assets"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "assets": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Asset",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "file": "/signature.pdf"
          }
        ]
      }
    },
    "UpdatePasswordRequest": {
      "type": "object",
      "title": "Password to update",
      "required": [
        "password",
        "current_password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "Password to update"
        },
        "current_password": {
          "type": "string",
          "description": "Current password"
        }
      },
      "description": "Request to update password"
    },
    "OrganisationFieldRequest": {
      "type": "object",
      "title": "Organisation Field Request",
      "required": [
        "field_type_id",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the field"
        },
        "meta": {
          "type": "map",
          "description": "Attributes of the field"
        },
        "field_type_id": {
          "type": "string",
          "description": "Id of the field type"
        },
        "description": {
          "type": "application",
          "description": "Field description"
        }
      },
      "example": {
        "name": "position",
        "meta": {
          "src": "/img/img.png",
          "alt": "Image"
        },
        "field_type_id": "asdlkne4781234123clk",
        "descrtiption": "text input"
      },
      "description": "Create organisation field"
    },
    "Role": {
      "type": "object",
      "title": "Content type under Role",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the role"
        },
        "id": {
          "type": "string",
          "description": "Id of the role"
        }
      },
      "description": "all the content type under the role"
    },
    "CurrentUser": {
      "type": "object",
      "title": "Current User",
      "required": [
        "email",
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "role": {
          "type": "string",
          "description": "User's role"
        },
        "profile_pic": {
          "type": "string",
          "description": "User's profile pic URL"
        },
        "organisation_id": {
          "type": "integer",
          "description": "ID of the user's oranisation"
        },
        "name": {
          "type": "string",
          "description": "Users name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the user"
        },
        "email_verify": {
          "type": "boolean",
          "description": "Email verification status"
        },
        "email": {
          "type": "string",
          "description": "Users email"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "role": "user",
        "profile_pic": "www.aws.com/users/johndoe.jpg",
        "organisation_id": "jn14786914qklnqw",
        "name": "John Doe",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "email_verify": true,
        "email": "email@xyz.com"
      },
      "description": "Currently loged in user"
    },
    "ContentAndContentTypeAndState": {
      "type": "object",
      "title": "Content and its Content Type",
      "properties": {
        "state": {
          "$ref": "#/definitions/State"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeWithoutFields"
        },
        "content": {
          "$ref": "#/definitions/Content"
        }
      },
      "example": {
        "state": {
          "updated_at": "2020-01-21T14:00:00Z",
          "state": "published",
          "order": 1,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Offer letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "description": "An offer letter"
        },
        "content": {
          "updated_at": "2020-01-21T14:00:00Z",
          "serialized": {
            "title": "Title of the content",
            "body": "Body of the content"
          },
          "raw": "Content",
          "instance_id": "OFFL01",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        }
      },
      "description": "A content and its content type"
    },
    "AlignStateRequest": {
      "type": "object",
      "title": "Show flow details and its states",
      "properties": {
        "states": {
          "$ref": "#/definitions/State"
        }
      },
      "example": {
        "states": [
          {
            "order": 1,
            "id": "1232148nb3478"
          },
          {
            "order": 2,
            "id": "1232148nb3478"
          }
        ]
      },
      "description": "Show all details of a flow including all the states undet the flow"
    },
    "Comment": {
      "type": "object",
      "title": "Comment",
      "required": [
        "master_id",
        "master",
        "parent_id",
        "is_parent",
        "comment"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the comment last updated"
        },
        "parent_id": {
          "type": "string",
          "description": "The ParentId of the comment"
        },
        "meta": {
          "type": "map",
          "description": "Meta data of inline comments"
        },
        "master_id": {
          "type": "string",
          "description": "The MasterId of the comment"
        },
        "master": {
          "type": "string",
          "description": "The Master of the comment"
        },
        "is_parent": {
          "type": "boolean",
          "description": "Parent or child comment"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the comment inserted"
        },
        "comment": {
          "type": "string",
          "description": "Posted comment"
        }
      },
      "example": {
        "user_id": "asdf2s2dfasd2",
        "updated_at": "2020-01-21T14:00:00Z",
        "organisation_id": "451s51dfsdf515",
        "meta": {
          "line": 12,
          "block": "introduction"
        },
        "master_id": "sdf15511551sdf",
        "master": "instance",
        "is_parent": true,
        "inserted_at": "2020-02-21T14:00:00Z",
        "comment": "a sample comment"
      },
      "description": "A Comment"
    },
    "ContentTypeAndLayoutAndFlowAndStates": {
      "type": "object",
      "title": "Content Type, Layout, Flow and states",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "flow": {
          "$ref": "#/definitions/FlowAndStatesWithoutCreator"
        },
        "fields": {
          "$ref": "#/definitions/ContentTypeFields"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "layout": {
          "width": 40.0,
          "updated_at": "2020-01-21T14:00:00Z",
          "unit": "cm",
          "slug_file": "/letter.zip",
          "slug": "Pandoc",
          "name": "Official Letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "height": 20.0,
          "description": "An official letter"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "states": [
            {
              "state": "published",
              "order": 1,
              "id": "1232148nb3478"
            }
          ],
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "fields": [
          {
            "key": "position",
            "field_type_id": "kjb14713132lkdac"
          },
          {
            "key": "name",
            "field_type_id": "kjb2347mnsad"
          }
        ],
        "description": "An offer letter",
        "color": "#fffff"
      },
      "description": "Content Type to be used for the generation of a document, its layout, flow and states."
    },
    "ContentTypeWithoutFields": {
      "type": "object",
      "title": "Content Type without fields",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "description": "An offer letter",
        "color": "#fffff"
      },
      "description": "A Content Type without its fields."
    },
    "UserLoginRequest": {
      "type": "object",
      "title": "User Login",
      "required": [
        "password",
        "email"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "email": {
          "type": "string",
          "description": "User's email"
        }
      },
      "example": {
        "password": "Password",
        "email": "email@xyz.com"
      },
      "description": "A user log in to the application"
    },
    "ContentTypesIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "content_types": {
          "$ref": "#/definitions/ContentTypesAndLayoutsAndFlows"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "content_types": [
          {
            "creator": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "John Doe",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "email_verify": true,
              "email": "email@xyz.com"
            },
            "content_type": {
              "updated_at": "2020-01-21T14:00:00Z",
              "prefix": "OFFLET",
              "name": "Offer letter",
              "layout": {
                "width": 40.0,
                "updated_at": "2020-01-21T14:00:00Z",
                "unit": "cm",
                "slug_file": "/letter.zip",
                "slug": "Pandoc",
                "name": "Official Letter",
                "inserted_at": "2020-02-21T14:00:00Z",
                "id": "1232148nb3478",
                "height": 20.0,
                "description": "An official letter"
              },
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "flow": {
                "updated_at": "2020-01-21T14:00:00Z",
                "name": "Flow 1",
                "inserted_at": "2020-02-21T14:00:00Z",
                "id": "1232148nb3478"
              },
              "fields": [
                {
                  "key": "position",
                  "field_type_id": "kjb14713132lkdac"
                },
                {
                  "key": "name",
                  "field_type_id": "kjb2347mnsad"
                }
              ],
              "description": "An offer letter",
              "color": "#fffff"
            }
          }
        ]
      }
    },
    "BlockTemplateRequest": {
      "type": "object",
      "title": "BlockTemplate Request",
      "required": [
        "serialized",
        "body",
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "The Title of the Block Template"
        },
        "serialized": {
          "type": "string",
          "description": "The serialized of the block template"
        },
        "body": {
          "type": "string",
          "description": "The Body of the block template"
        }
      },
      "example": {
        "title": "a sample title",
        "serialized": "a sample serialized",
        "body": "a sample body"
      },
      "description": "Create block_template request."
    },
    "Engines": {
      "type": "array",
      "title": "Engines",
      "items": {
        "$ref": "#/definitions/Engine"
      },
      "description": "All engines that have been created"
    },
    "MembershipRequest": {
      "type": "object",
      "title": "Membership request",
      "required": [
        "razorpay_id"
      ],
      "properties": {
        "razorpay_id": {
          "type": "string",
          "description": "Razorpay unique ID"
        },
        "plan_id": {
          "type": "string",
          "description": "ID of the selected plan"
        }
      },
      "example": {
        "razorpay_id": "pay-23vgoin453412",
        "plan_id": "kjbdi1237691823i"
      },
      "description": "Membership update request"
    },
    "Themes": {
      "type": "array",
      "title": "All themes and its details",
      "items": {
        "$ref": "#/definitions/Theme"
      },
      "description": "All themes that have been created under current user's organisation and their details"
    },
    "CollectionFormIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "collection_forms": {
          "$ref": "#/definitions/CollectionFormShow"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "collection_forms": [
          {
            "collection_form": {
              "updated_at": "2020-02-21T14:00:00Z",
              "title": "Collection Form",
              "inserted_at": "2020-01-21T14:00:00Z",
              "id": "6006ce53-edf0-4044-8288-0422ef9ca2d8",
              "description": "collection form"
            }
          }
        ]
      }
    },
    "RoleGroups": {
      "type": "array",
      "title": "Role group list",
      "items": {
        "$ref": "#/definitions/RoleGroup"
      }
    },
    "InstanceApprovalSystems": {
      "type": "array",
      "title": "Instance approval systems",
      "items": {
        "$ref": "#/definitions/InstanceApprovalSystem"
      },
      "description": "List of all instance approval system"
    },
    "ShowContent": {
      "type": "object",
      "title": "Content and its details",
      "properties": {
        "state": {
          "$ref": "#/definitions/State"
        },
        "creator": {
          "$ref": "#/definitions/User"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeAndLayout"
        },
        "content": {
          "$ref": "#/definitions/Content"
        }
      },
      "example": {
        "state": {
          "updated_at": "2020-01-21T14:00:00Z",
          "state": "published",
          "order": 1,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Offer letter",
          "layout": {
            "width": 40.0,
            "updated_at": "2020-01-21T14:00:00Z",
            "unit": "cm",
            "slug_file": "/letter.zip",
            "slug": "Pandoc",
            "name": "Official Letter",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "height": 20.0,
            "description": "An official letter"
          },
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "fields": {
            "position": "string",
            "name": "string",
            "joining_date": "date",
            "approved_by": "string"
          },
          "description": "An offer letter"
        },
        "content": {
          "updated_at": "2020-01-21T14:00:00Z",
          "serialized": {
            "title": "Title of the content",
            "body": "Body of the content"
          },
          "raw": "Content",
          "instance_id": "OFFL01",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        }
      },
      "description": "A content and all its details"
    },
    "ContentTypeWithFields": {
      "type": "object",
      "title": "Content Type",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "fields": {
          "$ref": "#/definitions/ContentTypeFields"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "fields": [
          {
            "meta": {
              "src": "/img/img.png",
              "alt": "Image"
            },
            "key": "position",
            "field_type_id": "kjb14713132lkdac"
          },
          {
            "meta": {
              "src": "/img/img.png",
              "alt": "Image"
            },
            "key": "name",
            "field_type_id": "kjb2347mnsad"
          }
        ],
        "description": "An offer letter",
        "color": "#fffff"
      },
      "description": "A Content Type."
    },
    "OrganisationRequest": {
      "type": "object",
      "title": "Organisation Request",
      "required": [
        "legal_name",
        "name"
      ],
      "properties": {
        "phone": {
          "type": "string",
          "description": "Offical Phone number"
        },
        "name": {
          "type": "string",
          "description": "Organisation name"
        },
        "legal_name": {
          "type": "string",
          "description": "Legal name of organisation"
        },
        "gstin": {
          "type": "string",
          "description": "Goods and service tax invoice numger"
        },
        "email": {
          "type": "string",
          "description": "Official email"
        },
        "address": {
          "type": "string",
          "description": "Address of organisation"
        }
      },
      "example": {
        "phone": "865623232",
        "name": "ABC enterprices",
        "legal_name": "ABC enterprices LLC",
        "gstin": "32AA65FF56545353",
        "email": "abcent@gmail.com",
        "address": "#24, XV Building, TS DEB Layout "
      },
      "description": "An organisation to be register for enterprice operation"
    },
    "BlockTemplate": {
      "type": "object",
      "title": "BlockTemplate",
      "required": [
        "serialized",
        "body",
        "title"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the block_template last updated"
        },
        "title": {
          "type": "string",
          "description": "The Title of the block template"
        },
        "serialized": {
          "type": "string",
          "description": "The serialized of the block template"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the block_template inserted"
        },
        "body": {
          "type": "string",
          "description": "The Body of the block template"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "title": "a sample title",
        "serialized": "a sample serialized",
        "inserted_at": "2020-02-21T14:00:00Z",
        "body": "a sample body"
      },
      "description": "A BlockTemplate"
    },
    "ShowLayout": {
      "type": "object",
      "title": "Layout and all its details",
      "properties": {
        "layout": {
          "$ref": "#/definitions/LayoutAndEngine"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "layout": {
          "width": 40.0,
          "updated_at": "2020-01-21T14:00:00Z",
          "unit": "cm",
          "slug_file": "/official_letter.zip",
          "slug": "Pandoc",
          "screenshot": "/official_letter.jpg",
          "name": "Official Letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "height": 20.0,
          "engine": {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Pandoc",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "api_route": ""
          },
          "description": "An official letter"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "API to show a layout and all its details"
    },
    "DataTemplatesIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "data_templates": {
          "$ref": "#/definitions/DataTemplateAndContentType"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "data_templates": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "title_template": "Letter for [user]",
            "title": "Main template",
            "serialized": {
              "title": "Offer letter of [client]",
              "data": "Hi [user]"
            },
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "data": "Hi [user]",
            "content_type": {
              "updated_at": "2020-01-21T14:00:00Z",
              "prefix": "OFFLET",
              "name": "Offer letter",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "description": "An offer letter"
            }
          }
        ]
      }
    },
    "MembersIndex": {
      "type": "object",
      "title": "Members index",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "members": {
          "$ref": "#/definitions/Members"
        }
      }
    },
    "TriggerHistory": {
      "type": "object",
      "title": "A trigger history object",
      "required": [
        "zip_file",
        "duration",
        "end_time",
        "start_time",
        "state",
        "error",
        "data",
        "id"
      ],
      "properties": {
        "zip_file": {
          "type": "zip_file",
          "description": "Zip file of the trigger history"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "Trigger history last updated time"
        },
        "state": {
          "type": "state",
          "description": "State of the trigger history"
        },
        "start_time": {
          "type": "start_time",
          "description": "Start time of the trigger history"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "Trigger history created time"
        },
        "id": {
          "type": "string",
          "description": "ID of the trigger history"
        },
        "error": {
          "type": "map",
          "description": "Error data of the the trigger history"
        },
        "end_time": {
          "type": "end_time",
          "description": "End time of the trigger history"
        },
        "duration": {
          "type": "duration",
          "description": "Duration of execution of the trigger history"
        },
        "data": {
          "type": "map",
          "description": "Input data of the the trigger history"
        }
      },
      "example": {
        "zip_file": "builds-2020-01-21T14:11:58.565745Z.zip",
        "updated_at": "2020-01-21T14:00:00Z",
        "state": "success",
        "start_time": "2020-01-21 14:00:00",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "jhdiuh23y498sjdbda",
        "error": {},
        "end_time": "2020-01-21 14:12:00",
        "duration": 720,
        "data": {
          "name": "John Doe"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "A trigger history object"
    },
    "OrganisationFieldIndex": {
      "type": "object",
      "title": "Organisation field index",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "members": {
          "$ref": "#/definitions/OrganisationField"
        }
      }
    },
    "Organisation": {
      "type": "object",
      "title": "Organisation",
      "required": [
        "legal_name",
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "phone": {
          "type": "strign",
          "description": "Phone number of organisation"
        },
        "name_of_cto": {
          "type": "string",
          "description": "Organisation CTO's Name"
        },
        "name_of_ceo": {
          "type": "string",
          "description": "Organisation CEO's Name"
        },
        "name": {
          "type": "string",
          "description": "Name of the organisation"
        },
        "logo": {
          "type": "string",
          "description": "Logo of organisation"
        },
        "legal_name": {
          "type": "string",
          "description": "Legal Name of the organisation"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The id of an organisation"
        },
        "gstin": {
          "type": "string",
          "description": "GSTIN of organisation"
        },
        "email": {
          "type": "string",
          "description": "Email of organisation"
        },
        "corporate_id": {
          "type": "string",
          "description": "Corporate id of organisation"
        },
        "address": {
          "type": "string",
          "description": "Address of the organisation"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "phone": "865623232",
        "name_of_cto": "Foo Doo",
        "name_of_ceo": "John Doe",
        "name": "ABC enterprices",
        "logo": "/logo.jpg",
        "legal_name": "ABC enterprices LLC",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "mnbjhb23488n23e",
        "gstin": "32AA65FF56545353",
        "email": "abcent@gmail.com",
        "corporate_id": "BNIJSN1234NGT",
        "address": "#24, XV Building, TS DEB Layout "
      },
      "description": "An Organisation"
    },
    "Members": {
      "type": "array",
      "title": "Members array",
      "items": {
        "$ref": "#/definitions/CurrentUser"
      },
      "description": "List of Users/members of an organisation."
    },
    "ShowTheme": {
      "type": "object",
      "title": "Show Theme",
      "properties": {
        "theme": {
          "$ref": "#/definitions/Theme"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "theme": {
          "updated_at": "2020-01-21T14:00:00Z",
          "typescale": {
            "p": "6",
            "h2": "8",
            "h1": "10"
          },
          "name": "Official Letter Theme",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "font": "Malery",
          "file": "/malory.css"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show details of a theme"
    },
    "ContentRequest": {
      "type": "object",
      "title": "Content Request",
      "required": [
        "raw"
      ],
      "properties": {
        "serialized": {
          "type": "string",
          "description": "Content serialized data"
        },
        "raw": {
          "type": "string",
          "description": "Content raw data"
        }
      },
      "example": {
        "serialized": {
          "title": "Title of the content",
          "body": "Body of the content"
        },
        "raw": "Content data"
      },
      "description": "Content creation request"
    },
    "FieldTypes": {
      "type": "array",
      "title": "All field types",
      "items": {
        "$ref": "#/definitions/FieldType"
      },
      "description": "All filed types that have been created so far"
    },
    "TriggerData": {
      "type": "object",
      "title": "Data of trigger message",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "map",
          "description": "Data of a trigger message"
        }
      },
      "example": {
        "data": {
          "position": "HR Manager",
          "name": "John Doe"
        }
      },
      "description": "Data of a trigger message"
    },
    "ContentTypeRequest": {
      "type": "object",
      "title": "Content Type Request",
      "required": [
        "prefix",
        "flow_id",
        "layout_id",
        "description",
        "name"
      ],
      "properties": {
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "layout_id": {
          "type": "string",
          "description": "ID of the layout selected"
        },
        "flow_id": {
          "type": "string",
          "description": "ID of the flow selected"
        },
        "fields": {
          "$ref": "#/definitions/ContentTypeFieldRequests"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "example": {
        "prefix": "OFFLET",
        "name": "Offer letter",
        "layout_id": "1232148nb3478",
        "flow_id": "234okjnskjb8234",
        "fields": [
          {
            "meta": {
              "src": "/img/img.png",
              "alt": "Image"
            },
            "key": "position",
            "field_type_id": "kjb14713132lkdac",
            "description": "a text input"
          },
          {
            "key": "name",
            "field_type_id": "kjb2347mnsad"
          }
        ],
        "description": "An offer letter",
        "color": "#fff"
      },
      "description": "Create content type request."
    },
    "Vendors": {
      "type": "array",
      "title": "Vendor list",
      "items": {
        "$ref": "#/definitions/Vendor"
      }
    },
    "Vendor": {
      "type": "object",
      "title": "Vendor",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the vendor last updated"
        },
        "reg_no": {
          "type": "string",
          "description": "The RegNo of the vendor"
        },
        "phone": {
          "type": "string",
          "description": "Phone number"
        },
        "name": {
          "type": "string",
          "description": "Vendors name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the vendor inserted"
        },
        "gstin": {
          "type": "string",
          "description": "The Gstin of the vendor"
        },
        "email": {
          "type": "string",
          "description": "Vendors email"
        },
        "contact_person": {
          "type": "string",
          "description": "The ContactPerson of the vendor"
        },
        "address": {
          "type": "string",
          "description": "The Address of the vendor"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "reg_no": "ASD21122",
        "phone": "98565262262",
        "name": "Vos Services",
        "inserted_at": "2020-02-21T14:00:00Z",
        "gstin": "32ADF22SDD2DFS32SDF",
        "email": "serv@vosmail.com",
        "contact_person": "vikas abu",
        "address": "rose boru, hourbures"
      },
      "description": "A Vendor"
    },
    "Layout": {
      "type": "object",
      "title": "Layout",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "width": {
          "type": "float",
          "description": "Width of the layout"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "unit": {
          "type": "string",
          "description": "Unit of dimensions"
        },
        "slug_file": {
          "type": "string",
          "description": "URL of the uploaded slug file"
        },
        "slug": {
          "type": "string",
          "description": "Name of the slug to be used for the layout"
        },
        "screenshot": {
          "type": "string",
          "description": "URL of the uploaded screenshot"
        },
        "name": {
          "type": "string",
          "description": "Layout's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the layout"
        },
        "height": {
          "type": "float",
          "description": "Height of the layout"
        },
        "description": {
          "type": "string",
          "description": "Layout's description"
        }
      },
      "example": {
        "width": 40.0,
        "updated_at": "2020-01-21T14:00:00Z",
        "unit": "cm",
        "slug_file": "/official_letter.zip",
        "slug": "Pandoc",
        "screenshot": "/official_letter.jpg",
        "name": "Official Letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "height": 20.0,
        "description": "An official letter"
      },
      "description": "A Layout"
    },
    "RoleGroupIndex": {
      "type": "object",
      "title": "Role group index",
      "properties": {
        "role_groups": {
          "$ref": "#/definitions/RoleGroups"
        }
      },
      "example": {
        "role_groups": [
          {
            "name": "Chatura",
            "description": "Team containg 4 roles on management"
          },
          {
            "name": "Chatura",
            "description": "Team containg 4 roles on management"
          }
        ]
      }
    },
    "ContentTypesAndLayoutsAndFlows": {
      "type": "array",
      "title": "Content Types and their Layouts and flow",
      "items": {
        "$ref": "#/definitions/ContentTypeAndLayoutAndFlow"
      },
      "description": "All content types that have been created and their layouts and flow"
    },
    "Assets": {
      "type": "array",
      "title": "All assets in an organisation",
      "items": {
        "$ref": "#/definitions/Asset"
      },
      "description": "All assets that have been created under an organisation"
    },
    "Pipelines": {
      "type": "array",
      "title": "Pipeline list",
      "items": {
        "$ref": "#/definitions/Pipeline"
      },
      "description": "Pipelines created so far"
    },
    "TriggerHistories": {
      "type": "array",
      "title": "Trigger History list",
      "items": {
        "$ref": "#/definitions/TriggerHistory"
      },
      "description": "Trigger histories created so far"
    },
    "Index": {
      "type": "object",
      "title": "Organisation index",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "toal_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "organisations": {
          "$ref": "#/definitions/ListOfOrganisations"
        }
      },
      "example": {
        "total_pages": 1,
        "total_entries": 1,
        "page_number": 1,
        "organisations": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "phone": "865623232",
            "name_of_cto": "Foo Doo",
            "name_of_ceo": "John Doe",
            "name": "ABC enterprices",
            "logo": "/logo.jpg",
            "legal_name": "ABC enterprices LLC",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "mnbjhb23488n23e",
            "gstin": "32AA65FF56545353",
            "email": "abcent@gmail.com",
            "corporate_id": "BNIJSN1234NGT",
            "address": "#24, XV Building, TS DEB Layout "
          }
        ]
      }
    },
    "PipeStageRequest": {
      "type": "array",
      "title": "Pipe stage request list",
      "items": {
        "$ref": "#/definitions/PipeStageRequestMap"
      },
      "example": [
        {
          "state_id": "kjwe1823786b3478",
          "data_template_id": "23e40p9lknsd478",
          "content_type_id": "12lkjn3490u12"
        },
        {
          "state_id": "1232148nb3478",
          "data_template_id": "1232148nb3478",
          "content_type_id": "1232148nb3478"
        }
      ],
      "description": "List of maps with content type, data template and state UUIDs"
    },
    "VendorRequest": {
      "type": "object",
      "title": "Vendor Request",
      "required": [
        "reg_no",
        "gstin",
        "address",
        "phone",
        "email",
        "name"
      ],
      "properties": {
        "reg_no": {
          "type": "string",
          "description": "The RegNo of the vendor"
        },
        "phone": {
          "type": "string",
          "description": "Phone number"
        },
        "name": {
          "type": "string",
          "description": "Vendors name"
        },
        "gstin": {
          "type": "string",
          "description": "The Gstin of the vendor"
        },
        "email": {
          "type": "string",
          "description": "Vendors email"
        },
        "contact_person": {
          "type": "string",
          "description": "The ContactPerson of the vendor"
        },
        "address": {
          "type": "string",
          "description": "The Address of the vendor"
        }
      },
      "example": {
        "reg_no": "ASD21122",
        "phone": "98565262262",
        "name": "Vos Services",
        "gstin": "32ADF22SDD2DFS32SDF",
        "email": "serv@vosmail.com",
        "contact_person": "vikas abu",
        "address": "rose boru, hourbures"
      },
      "description": "Create vendor request."
    },
    "UserSearch": {
      "type": "object",
      "title": "User",
      "properties": {
        "users": {
          "$ref": "#/definitions/User"
        },
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "users": [
          {
            "updated_at": "2021-05-06T15:26:52",
            "name": "Admin",
            "inserted_at": "2021-05-06T15:26:52",
            "id": "466f1fa1-9657-4166-b372-21e8135aeaf1",
            "email_verify": false,
            "email": "admin@wraftdocs.com"
          }
        ],
        "total_pages": 1,
        "total_entries": 2,
        "page_number": 1
      },
      "description": "A user of the application"
    },
    "LayoutsAndEngines": {
      "type": "array",
      "title": "Layouts and its Engines",
      "items": {
        "$ref": "#/definitions/LayoutAndEngine"
      },
      "description": "All layouts that have been created and their engines"
    },
    "Pipeline": {
      "type": "object",
      "title": "Pipeline",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the pipeline"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the pipeline"
        },
        "api_route": {
          "type": "string",
          "description": "API route of the CRM"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Pipeline 1",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "api_route": "client.crm.com"
      },
      "description": "Pipeline to generate multiple docs."
    },
    "BuildRequest": {
      "type": "object",
      "title": "Build request",
      "properties": {
        "naration": {
          "type": "string",
          "description": "Naration for this version"
        }
      },
      "example": {
        "naration": "New year edition"
      },
      "description": "Request to build a document"
    },
    "Instance": {
      "type": "object",
      "title": "Content",
      "required": [
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "serialized": {
          "type": "map",
          "description": "Serialized data of the content"
        },
        "raw": {
          "type": "string",
          "description": "Raw data of the content"
        },
        "instance_id": {
          "type": "string",
          "description": "A unique ID generated for the content"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content"
        },
        "build": {
          "type": "string",
          "description": "URL of the build document"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "serialized": {
          "title": "Title of the content",
          "body": "Body of the content"
        },
        "raw": "Content",
        "instance_id": "OFFL01",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "build": "/uploads/OFFL01/final.pdf"
      },
      "description": "A content, which is then used to generate the out files."
    },
    "RoleRequest": {
      "type": "object",
      "title": "Role request",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Role name"
        }
      },
      "example": {
        "name": "hr"
      },
      "description": "Create role request"
    },
    "ContentTypeFields": {
      "type": "array",
      "title": "Field response array",
      "items": {
        "$ref": "#/definitions/ContentTypeField"
      },
      "description": "List of field type in response."
    },
    "EngineIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "engines": {
          "$ref": "#/definitions/Engines"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "engines": [
          {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Pandoc",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "api_route": ""
          }
        ]
      }
    },
    "BlockTemplates": {
      "type": "array",
      "title": "BlockTemplate list",
      "items": {
        "$ref": "#/definitions/BlockTemplate"
      }
    },
    "ShowFlows": {
      "type": "array",
      "title": "All flows and its details",
      "items": {
        "$ref": "#/definitions/UpdateFlow"
      },
      "description": "All flows that have been created and their details"
    },
    "TokenVerifiedInfo": {
      "type": "object",
      "title": "Token verified info",
      "properties": {
        "info": {
          "type": "string",
          "description": "info"
        }
      },
      "description": "Token verified info"
    },
    "FlowIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "states": {
          "$ref": "#/definitions/ShowStates"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "states": [
          {
            "state": {
              "updated_at": "2020-01-21T14:00:00Z",
              "state": "published",
              "order": 1,
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478"
            },
            "flow": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "Flow 1",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "jnb234881adsad"
            },
            "creator": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "John Doe",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "email_verify": true,
              "email": "email@xyz.com"
            }
          }
        ],
        "page_number": 1
      }
    },
    "CollectionFormFieldShow": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the collection form field"
        },
        "id": {
          "type": "string",
          "description": "The ID of the collection form field"
        },
        "description": {
          "type": "string",
          "description": "Description for name"
        }
      },
      "example": {
        "collection_form_field": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Collection Form Field",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        }
      },
      "description": "show collection form field and its details"
    },
    "CommentRequest": {
      "type": "object",
      "title": "Comment Request",
      "required": [
        "master_id",
        "master",
        "parent_id",
        "is_parent",
        "comment"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "Parent id of a child comment"
        },
        "meta": {
          "type": "map",
          "description": "Meta data of inline comments"
        },
        "master_id": {
          "type": "string",
          "description": "master id of the comment"
        },
        "master": {
          "type": "string",
          "description": "Comments master"
        },
        "is_parent": {
          "type": "boolean",
          "description": "Declare the comment is parent or child"
        },
        "comment": {
          "type": "string",
          "description": "The Comment to post"
        }
      },
      "example": {
        "meta": {
          "line": 12,
          "block": "introduction"
        },
        "master_id": "32232sdffasdfsfdfasdfsdfs",
        "master": "instance",
        "is_parent": true,
        "comment": "a sample comment"
      },
      "description": "Create comment request."
    },
    "ApprovedInstance": {
      "type": "object",
      "title": "Approved instance",
      "properties": {
        "state_id": {
          "type": "string",
          "description": "State id"
        },
        "state": {
          "type": "string",
          "description": "Current State"
        },
        "id": {
          "type": "string",
          "description": "Instance id"
        }
      },
      "description": "Content approved by approver"
    },
    "ContentType": {
      "type": "object",
      "title": "Content type",
      "required": [
        "prefix",
        "flow_uuid",
        "layout_uuid",
        "description"
      ],
      "properties": {
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "layout_uuid": {
          "type": "string",
          "description": "ID of the layout selected"
        },
        "id": {
          "type": "string",
          "description": "ID of the content_type"
        },
        "flow_uuid": {
          "type": "string",
          "description": "ID of the flow selected"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        },
        "color": {
          "type": "string",
          "description": "Hex code of color"
        }
      },
      "description": "all the content type"
    },
    "LayoutIndex": {
      "type": "object",
      "properties": {
        "total_pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "total_entries": {
          "type": "integer",
          "description": "Total number of contents"
        },
        "page_number": {
          "type": "integer",
          "description": "Page number"
        },
        "layouts": {
          "$ref": "#/definitions/LayoutsAndEngines"
        }
      },
      "example": {
        "total_pages": 2,
        "total_entries": 15,
        "page_number": 1,
        "layouts": [
          {
            "width": 40.0,
            "updated_at": "2020-01-21T14:00:00Z",
            "unit": "cm",
            "slug_file": "/official_letter.zip",
            "slug": "Pandoc",
            "screenshot": "/official_letter.jpg",
            "name": "Official Letter",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "height": 20.0,
            "engine": {
              "updated_at": "2020-01-21T14:00:00Z",
              "name": "Pandoc",
              "inserted_at": "2020-02-21T14:00:00Z",
              "id": "1232148nb3478",
              "api_route": ""
            },
            "description": "An official letter"
          }
        ]
      }
    }
  },
  "basePath": "/api/v1"
}
